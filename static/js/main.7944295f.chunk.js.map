{"version":3,"sources":["redux/types.ts","redux/state/masterPlayerInfo/selectors.ts","redux/state/offsets/selectors.ts","redux/state/playersInfo/reducer.ts","redux/state/playersInfo/selectors.ts","redux/state/settings/selectors.ts","redux/state/playersInfo/actions.ts","redux/state/masterPlayerInfo/actions.ts","redux/state/offsets/actions.ts","redux/state/settings/actions.ts","redux/middlewares/masterPlayerMiddleware.ts","redux/state/masterPlayerInfo/reducer.ts","redux/state/offsets/reducer.ts","redux/state/settings/reducer.ts","redux/state/videos/reducer.ts","redux/state/index.ts","redux/index.ts","redux/middlewares/offsetsMiddleware.ts","redux/middlewares/playerGroupsMiddleware.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","components/AddVideosDialog/style.ts","components/AddVideosDialog/AddVideosDialog.tsx","redux/state/videos/actions.ts","components/AppBar/AppBar.tsx","components/KeyboardEventHandler/KeyboardEventHandler.tsx","utils/formatSeconds.ts","utils/getOptimalGridPlayerSize.ts","utils/getPlayerGridPositions.ts","components/PlaybackSlider/style.ts","components/PlaybackSlider/PlaybackSlider.tsx","components/VolumeControl/style.ts","components/VolumeControl/VolumeControl.tsx","components/PlaybackControlBar/style.ts","components/PlaybackControlBar/PlaybackControlBar.tsx","components/IndividualPlaybackControlBar/IndividualPlaybackControlBarActions.tsx","components/IndividualPlaybackControlBar/IndividualPlaybackControlBar.tsx","components/MasterPlaybackControlBar/style.ts","components/MasterPlaybackControlBar/MasterPlaybackControlBarSettingsMenu.tsx","components/MasterPlaybackControlBar/MasterPlaybackControlBarActions.tsx","components/MasterPlaybackControlBar/MasterPlaybackControlBar.tsx","components/PlayerControlOverlay/style.ts","components/PlayerControlOverlay/PlayerControlOverlay.tsx","components/VideoPlayer/style.ts","components/VideoPlayer/VideoPlayer.tsx","components/PlayersView/style.ts","components/PlayersView/PlayersView.tsx","redux/state/videos/selectors.ts","utils/getPlayerLinePositions.ts","style.ts","App.tsx","index.tsx","redux/state/playersInfo/types.ts","redux/state/masterPlayerInfo/types.ts","redux/state/settings/types.ts","redux/state/offsets/types.ts","redux/state/videos/types.ts"],"names":["getMasterPlayerInfo","state","masterPlayerInfo","getIsMasterPlayerPlaying","createSelector","getOr","getIsMasterPlayerBuffering","getMasterPlayerDurationSeconds","getMasterPlayerPlayedTime","playedSeconds","playedFraction","getMasterPlayerPlayedSeconds","getMasterPlayerPlayedFraction","getMasterPlayerLoadedTime","loadedSeconds","loadedFraction","getMasterPlayerLoadedFraction","getMasterPlayerVolume","getIsMasterPlayerMuted","getMasterPendingSeek","getOffsetsState","offsets","getOffsetsReferencePlayerId","get","getOffsets","getPlayerOffset","memoize","id","playersInfoInitialState","playerInfoInitialState","isReady","isPlaying","isBuffering","hasEnded","durationSeconds","volume","isMuted","pendingSeeks","getPlayersInfoState","playersInfo","getPlayerInfo","getIsPlayerPlaying","getIsPlayerBuffering","getPlayerDurationSeconds","getPlayerPlayedTime","getPlayerPlayedFraction","getPlayerLoadedTime","getPlayerLoadedFraction","getPlayerVolume","getIsPlayerMuted","getPlayerPendingSeeks","getMaxDurationPlayerId","compose","reduce","acc","curr","playerId","playerInfo","duration","entries","shouldPlayerCurrentlyPlay","maxDurationPlayerId","playerDuration","playerOffset","masterPlayedSeconds","areAllCorrectPlayersPlaying","Object","every","getSettingsState","settings","getIsFullscreen","getControlsMode","getLayout","getMainPlayerIds","getSecondaryPlayerIds","getIsPlayerMain","contains","canMovePlayerLeft","mainPlayerIds","secondaryPlayerIds","layout","indexInMain","indexOf","indexInSecondary","Layout","Overlay","canMovePlayerRight","length","getFocusedPlayerId","getFocusedPlayerInfo","focusedPlayerId","getIsFocusedPlayerPlaying","getFocusedPlayerDurationSeconds","getFocusedPlayerPlayedSeconds","getFocusedPlayerVolume","getIsFocusedPlayerMuted","playerStartPlaying","type","PLAYER_STARTED_PLAYING","payload","playerStopPlaying","PLAYER_STOPPED_PLAYING","playerStartBuffering","PLAYER_STARTED_BUFFERING","playerEndVideo","PLAYER_VIDEO_ENDED","playerUpdateVolume","PLAYER_VOLUME_UPDATED","playerMute","PLAYER_MUTED","playerUnmute","PLAYER_UNMUTED","playerPushPendingSeek","seekToSeconds","PLAYER_PENDING_SEEK_PUSHED","masterPlayerUpdateDuration","MASTER_PLAYER_DURATION_UPDATED","masterPlayerUpdateVolume","MASTER_PLAYER_VOLUME_UPDATED","masterPlayerMute","MASTER_PLAYER_MUTED","masterPlayerUnmute","MASTER_PLAYER_UNMUTED","startPlayback","dispatch","getState","isMasterReady","isMasterBuffering","keys","forEach","stopPlayback","seekTo","seconds","MASTER_PLAYER_PENDING_SEEK_SET","playerPlayedTime","PLAYER_VIDEO_RESTARTED","changeOffsetsReferencePlayerId","referenceId","OFFSETS_REFERENCE_PLAYER_ID_CHANGED","changePlayerOffset","offset","PLAYER_OFFSET_CHANGED","normalizeOffsets","maxOffset","maxOffsetPlayerId","Infinity","Math","abs","changeControlsMode","controlsMode","SETTINGS_CONTROLS_MODE_CHANGED","setMainAndSecondaryPlayerIds","SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED","enterFullscreen","SETTINGS_FULLSCREEN_ENTERED","ControlsMode","Grouped","exitFullscreen","SETTINGS_FULLSCREEN_EXITED","Individual","movePlayerToMainPlayers","filter","movePlayerToSecondaryPlayers","everyOtherPlayer","condition","currentId","masterPlayerInfoInitialState","pendingSeek","offsetsInitialState","referencePlayerId","settingsInitialState","isFullscreen","videosInitialState","rootReducer","combineReducers","action","MASTER_PLAYER_READY","MASTER_PLAYER_NOT_READY","MASTER_PLAYER_STARTED_PLAYING","MASTER_PLAYER_STOPPED_PLAYING","MASTER_PLAYER_STARTED_BUFFERING","MASTER_PLAYER_STOPPED_BUFFERING","MASTER_PLAYER_ENDED","MASTER_PLAYER_PENDING_SEEK_REMOVED","MASTER_PLAYER_PLAYED_TIME_UPDATED","MASTER_PLAYER_LOADED_TIME_UPDATED","MASTER_PLAYER_PROGRESS_UPDATED","PLAYER_OFFSET_REMOVED","omit","PLAYER_INITIALIZED","PLAYER_READY","PLAYER_STOPPED_BUFFERING","PLAYER_DURATION_UPDATED","PLAYER_PLAYED_TIME_UPDATED","PLAYER_LOADED_TIME_UPDATED","PLAYER_PROGRESS_UPDATED","progress","PLAYER_PENDING_SEEK_POPPED","slice","PLAYER_DELETED","SETTINGS_LAYOUT_CHANGED","SETTINGS_FOCUSED_PLAYER_ID_CHANGED","SETTINGS_MAIN_PLAYER_IDS_CHANGED","SETTINGS_SECONDARY_PLAYER_IDS_CHANGED","videos","VIDEOS_ADDED","VIDEO_DELETED","store","createStore","composeWithDevTools","applyMiddleware","thunk","next","prevState","removedId","removePlayerOffset","player","masterDurationSeconds","newMasterDurationSeconds","max","min","masterPlayerUpdatePlayedTime","masterLoadedSeconds","masterPlayerUpdateLoadedTime","i","newMainPlayerId","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","UrlTextFieldContainer","styled","div","OrDividerContainer","OrDividerLine","props","color","OrDividerTextContainer","AddFilesContainer","isDragActive","activeColor","FilesListContainer","FileItemContainer","connect","addVideos","open","onClose","theme","useTheme","useState","uuidv4","url","urls","setUrls","files","setFiles","fileNames","setFileNames","useDropzone","accept","onDropAccepted","acceptedFiles","parsedFiles","map","file","name","URL","createObjectURL","acceptedVideos","fromEntries","acceptedNames","getRootProps","getInputProps","handleConfirm","useCallback","filterEmpty","handleKeyPress","e","key","useEffect","addEventListener","removeEventListener","handleUrlInputChange","target","value","handleUrlInputBlur","some","handleFileDelete","isConfirmActive","addFilesContainerProps","palette","primary","main","Dialog","fullWidth","DialogTitle","DialogContent","Typography","variant","index","urlTextFieldProps","onChange","onBlur","placeholder","TextField","divider","IconButton","size","onClick","Delete","fontSize","style","width","DialogActions","Button","disabled","createStructuredSelector","onAddVideosClick","Slide","in","position","Toolbar","src","process","alt","height","flex","masterPlayerStartPlaying","masterPlayerStopPlaying","playerSeekTo","masterPlayerSeekTo","isActive","shouldPreventDefault","code","newVolume","preventDefault","formatSeconds","totalSeconds","roundedSeconds","round","hours","floor","minutes","paddedHours","paddedMinutes","paddedSeconds","getOptimalGridPlayerSize","containerWidth","containerHeight","numberOfPlayers","left","right","iters","middle","ceil","playerWidth","playerHeight","canFitPlayersOfSize","playersInRow","getPlayerGridPositions","alignToRight","cols","rows","Array","from","_","row","leftOffset","top","PlaybackSliderInteractionContainer","PlaybackSliderContainer","wide","PlaybackSliderBar","attrs","PlaybackSliderScrubber","visible","PlaybackSliderTimePreviewContainer","throttledHandleSeek","throttle","onSeek","PlaybackSlider","isHovered","setIsHovered","isScrubberGrabbed","setIsScrubberGrabbed","internalPlayedFraction","setInternalPlayedFraction","mousePosFraction","setMousePosFraction","sliderContainerRef","useRef","getMousePosFraction","mouseX","sliderContainer","current","getBoundingClientRect","sliderContainerWidth","relativeMouseX","x","handleNewPlayedFractionSelected","newMousePosFraction","handleWindowMouseMove","event","clientX","handleMouseUp","isInteractable","interactionContainerProps","onMouseEnter","onMouseLeave","onMouseMove","onMouseDown","onMouseUp","cursor","ref","light","VolumeControlContainer","isSliderVisible","VolumeControlIconContainer","VolumeControlSliderContainer","VolumeSlider","withStyles","root","thumb","boxShadow","active","track","marginTop","rail","Slider","throttledOnVolumeChange","onVolumeChange","getVolumeIcon","VolumeOff","VolumeDown","VolumeUp","VolumeControl","onMuteUnmute","isMouseOver","setIsMouseOver","isAdjustingVolume","setIsAdjustingVolume","internalVolume","setInternalVolume","volumeControlContainerProps","volumeControlSliderContainerProps","volumeSliderProps","step","v","parsedVolume","isArray","PlaybackControlBarContainer","PlaybackControlBarOuterWrapper","PlaybackControlBarInnerWrapper","PlaybackControlBarProgressTextWrapper","PlaybackControlBarButtonsSpacer","PlaybackControlBarActionsWrapper","PlaybackControlBar","onPlay","onPause","actions","playbackSliderProps","seekFraction","volumeControlProps","isLive","Pause","PlayArrow","ownProps","isMainPlayer","canMoveLeft","canMoveRight","makePlayerMain","movePlayerLeft","Grid","movePlayerRight","removeVideo","deleteVideo","deletePlayer","onHide","dense","settingsButtonRef","isSettingsMenuOpen","setIsSettingsMenuOpen","isDeleteConfirmationDialogShown","setIsDeleteConfirmationDialogShown","handleSettingsMenuHide","isShown","Focused","title","icon","CenterFocusWeak","ArrowBack","ArrowDownward","ArrowUpward","ArrowForward","VisibilityOff","Settings","Menu","anchorEl","MenuItem","ListItemIcon","Tooltip","DialogContentText","other","playbackControlBarProps","SettingsMenuContainer","SettingsMenuPaper","SettingsMenuListItemContainer","SettingsMenuListItemValueContainer","SettingsMenuListItemTitle","span","SettingsMenuListItemValue","SettingsMenuSectionHeader","SettingsMenuDescriptionListItemContainer","SettingsMenuDescriptionListItemCheckmarContainer","SettingsMenuDescriptionListItemTextContainer","SettingsMenuDescriptionListItemTitleContainer","SettingsMenuDescriptionListItemSubitleContainer","changeLayout","isOpen","anchorElement","selectedMenuIndex","setSelectedMenuIndex","popperProps","placement","zIndex","pointerEvents","settingsMenuContainerHeight","slideBaseProps","appear","mountOnEnter","unmountOnExit","Popper","direction","List","ListItem","button","Icon","ChevronRight","marginLeft","marginRight","ChevronLeft","Divider","backgroundColor","Check","toggleFullscreen","isVisible","settingsMenuProps","ClickAwayListener","onClickAway","display","justifyContent","alignItems","FullscreenExit","Fullscreen","updateVolume","mute","unmute","PlayerControlOverlayContainer","isBlockingPointerEvents","isCursorHidden","PlaybackControlBarWrapper","PlaybackControlOverlayBottomShadow","PlayerControlOverlayClickCapture","PlaybackControlBarFlexSpacer","MinimizedButtonContainer","changeFocusedPlayerId","hideControlsTimeoutId","isMinimized","setIsMinimized","isMouseOverPlayer","setIsMouseOverPlayer","isControlBarVisible","setIsControlBarVisible","updateHideTimeout","clearTimeout","setTimeout","isMaster","isOverlaid","playbackControlOverlayContainerProps","undefined","Fab","Visibility","VideoPlayerContainer","shadow","ReactPlayerWrapper","masterVolume","isPlayerMuted","isMasterMuted","initializePlayer","playerReady","playerStopBuffering","playerUpdateDuration","playerUpdateProgress","playerPopPendingSeek","video","playerRef","playerProps","controls","playing","onReady","onBuffer","onBufferEnd","onEnded","onDuration","onProgress","played","loaded","youtube","playerVars","disablekb","PlayersViewContainer","PlayersViewPlayerWrapper","padding","PlayersFocusedViewGrabber","heightFraction","PlayersFocusedViewGrabberDashes","PlayersOverlayViewGrabber","PlayersOverlayViewGrabberDashes","minPlayerHeight","containerRef","playerPositions","setPlayerPositions","isGrabberGrabbed","setIsGrabberGrabbed","focusedGrabberHeightFraction","setFocusedGrabberHeightFraction","overlayGrabberWidthFraction","setOverlayGrabberWidthFraction","overlayDimensions","setOverlayDimensions","updatePlayersFocusedPosition","container","mainContainerHeight","secondaryContainerHeight","mainPlayersSize","secondaryPlayersSize","mainPlayerPositions","secondaryPlayerPositions","pos","keyedMainPlayerPositions","positions","keyedSecondaryPlayerPositions","updatePlayersOverlayPosition","mainPlayerSize","mainPlayerPosition","lineWidth","minPlayerWidth","newCols","newRows","getPlayerLinePositions","offsetSecondaryPlayerPositions","overlayRows","overlayCols","updatePlayersGridPosition","playersSize","keyedPlayerPositions","getPlayerPosition","updateOverlayGrabberWidthFraction","mainPlayerWidth","overlayWidth","mouseY","clientY","relativeMouseY","y","clampedMouseY","mainPlayerLeft","clampedMouseX","handleGrabberMouseDown","handleGrabberMouseUp","focusedGrabberProps","overlayGrabberProps","mainPlayerTop","secondaryPlayerHeight","getOverlayGrabberPosition","playerPosition","isOverlaidSecondary","wrapperProps","GlobalStyle","createGlobalStyle","AppContainer","createMuiTheme","red","App","isAddVideosDialogOpen","setIsAddVideosDialogOpen","ThemeProvider","CssBaseline","ReactDOM","render","StrictMode","document","getElementById","href","origin","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7944295f.chunk.js","sourcesContent":["export * from './state/types';\r\nexport * from './state/masterPlayerInfo/types';\r\nexport * from './state/offsets/types';\r\nexport * from './state/playersInfo/types';\r\nexport * from './state/settings/types';\r\nexport * from './state/videos/types';\r\n","import { createSelector } from 'reselect';\r\nimport { getOr } from 'lodash/fp';\r\nimport { State } from '../types';\r\nimport { MasterPlayerInfoState } from './types';\r\n\r\nexport const getMasterPlayerInfo = (state: State) => state.masterPlayerInfo;\r\n\r\nexport const getIsMasterPlayerPlaying = createSelector(\r\n    getMasterPlayerInfo,\r\n    getOr(false, 'isPlaying'),\r\n);\r\n\r\nexport const getIsMasterPlayerBuffering = createSelector(\r\n    getMasterPlayerInfo,\r\n    getOr(false, 'isBuffering'),\r\n);\r\n\r\nexport const getMasterPlayerDurationSeconds = createSelector(\r\n    getMasterPlayerInfo,\r\n    getOr(0, 'durationSeconds'),\r\n);\r\n\r\nexport const getMasterPlayerPlayedTime = createSelector(\r\n    getMasterPlayerInfo,\r\n    ({ playedSeconds, playedFraction }: MasterPlayerInfoState) => ({ playedSeconds, playedFraction }),\r\n);\r\n\r\nexport const getMasterPlayerPlayedSeconds = createSelector(\r\n    getMasterPlayerPlayedTime,\r\n    getOr(0, 'playedSeconds'),\r\n);\r\n\r\nexport const getMasterPlayerPlayedFraction = createSelector(\r\n    getMasterPlayerPlayedTime,\r\n    getOr(0, 'playedFraction'),\r\n);\r\n\r\nexport const getMasterPlayerLoadedTime = createSelector(\r\n    getMasterPlayerInfo,\r\n    ({ loadedSeconds, loadedFraction }: MasterPlayerInfoState) => ({ loadedSeconds, loadedFraction }),\r\n);\r\n\r\nexport const getMasterPlayerLoadedSeconds = createSelector(\r\n    getMasterPlayerLoadedTime,\r\n    getOr(0, 'loadedSeconds'),\r\n);\r\n\r\nexport const getMasterPlayerLoadedFraction = createSelector(\r\n    getMasterPlayerLoadedTime,\r\n    getOr(0, 'loadedFraction'),\r\n);\r\n\r\nexport const getMasterPlayerVolume = createSelector(\r\n    getMasterPlayerInfo,\r\n    getOr(1, 'volume'),\r\n);\r\n\r\nexport const getIsMasterPlayerMuted = createSelector(\r\n    getMasterPlayerInfo,\r\n    getOr(false, 'isMuted'),\r\n);\r\n\r\nexport const getMasterPendingSeek = createSelector(\r\n    getMasterPlayerInfo,\r\n    getOr(null, 'pendingSeek'),\r\n);\r\n","import memoize from 'fast-memoize';\r\nimport { createSelector } from 'reselect';\r\nimport { get, getOr } from 'lodash/fp';\r\nimport { State } from '../types';\r\nimport { OffsetsState } from './types';\r\n\r\nexport const getOffsetsState = (state: State) => state.offsets;\r\n\r\nexport const getOffsetsReferencePlayerId = createSelector<State, OffsetsState, string | null>(\r\n    getOffsetsState,\r\n    get('referencePlayerId'),\r\n);\r\n\r\nexport const getOffsets = createSelector<State, OffsetsState, Record<string, number>>(\r\n    getOffsetsState,\r\n    get('offsets'),\r\n);\r\n\r\nconst getPlayerOffsetBase = (id: string) => createSelector(\r\n    getOffsets,\r\n    getOr(0, id),\r\n);\r\nexport const getPlayerOffset = memoize(getPlayerOffsetBase);\r\n","import { omit } from 'lodash/fp';\r\nimport {\r\n    PlayerInfo,\r\n    PlayersInfoState,\r\n    PlayersInfoAction,\r\n    PLAYER_INITIALIZED,\r\n    PLAYER_READY,\r\n    PLAYER_STARTED_PLAYING,\r\n    PLAYER_STOPPED_PLAYING,\r\n    PLAYER_STARTED_BUFFERING,\r\n    PLAYER_STOPPED_BUFFERING,\r\n    PLAYER_VIDEO_ENDED,\r\n    PLAYER_VIDEO_RESTARTED,\r\n    PLAYER_DURATION_UPDATED,\r\n    PLAYER_PLAYED_TIME_UPDATED,\r\n    PLAYER_LOADED_TIME_UPDATED,\r\n    PLAYER_PROGRESS_UPDATED,\r\n    PLAYER_VOLUME_UPDATED,\r\n    PLAYER_MUTED,\r\n    PLAYER_UNMUTED,\r\n    PLAYER_PENDING_SEEK_PUSHED,\r\n    PLAYER_PENDING_SEEK_POPPED,\r\n    PLAYER_DELETED,\r\n} from './types';\r\n\r\nexport const playersInfoInitialState: PlayersInfoState = {};\r\n\r\nexport const playerInfoInitialState: PlayerInfo = {\r\n    isReady: false,\r\n    isPlaying: false,\r\n    isBuffering: false,\r\n    hasEnded: false,\r\n    durationSeconds: 0,\r\n    playedSeconds: 0,\r\n    playedFraction: 0,\r\n    loadedSeconds: 0,\r\n    loadedFraction: 0,\r\n    volume: 1,\r\n    isMuted: false,\r\n    pendingSeeks: [],\r\n};\r\n\r\nexport const playersInfoReducer = (state = playersInfoInitialState, action: PlayersInfoAction) => {\r\n    switch (action.type) {\r\n        case PLAYER_INITIALIZED:\r\n            return { ...state, [action.payload.id]: { ...playerInfoInitialState } };\r\n\r\n        case PLAYER_READY:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                isReady: true,\r\n            } };\r\n\r\n        case PLAYER_STARTED_PLAYING:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                isPlaying: true,\r\n                isBuffering: false,\r\n                hasEnded: false,\r\n            } };\r\n\r\n        case PLAYER_STOPPED_PLAYING:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                isPlaying: false,\r\n            } };\r\n\r\n        case PLAYER_STARTED_BUFFERING:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                isBuffering: true,\r\n            } };\r\n\r\n        case PLAYER_STOPPED_BUFFERING:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                isBuffering: false,\r\n            } };\r\n\r\n        case PLAYER_VIDEO_ENDED:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                hasEnded: true,\r\n                isBuffering: false,\r\n            } };\r\n\r\n        case PLAYER_VIDEO_RESTARTED:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                hasEnded: false,\r\n            } };\r\n\r\n        case PLAYER_DURATION_UPDATED:\r\n            const { durationSeconds } = action.payload;\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                durationSeconds,\r\n            } };\r\n\r\n        case PLAYER_PLAYED_TIME_UPDATED:\r\n            const { playedSeconds, playedFraction } = action.payload;\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                playedSeconds,\r\n                playedFraction,\r\n            } };\r\n\r\n        case PLAYER_LOADED_TIME_UPDATED:\r\n            const { loadedSeconds, loadedFraction } = action.payload;\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                loadedSeconds,\r\n                loadedFraction,\r\n            } };\r\n\r\n        case PLAYER_PROGRESS_UPDATED:\r\n            const { id, ...progress } = action.payload;\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                ...progress,\r\n            } };\r\n\r\n        case PLAYER_VOLUME_UPDATED:\r\n            const { volume } = action.payload;\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                volume,\r\n                isMuted: false,\r\n            } };\r\n\r\n        case PLAYER_MUTED:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                isMuted: true,\r\n            } };\r\n\r\n        case PLAYER_UNMUTED:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                isMuted: false,\r\n            } };\r\n\r\n        case PLAYER_PENDING_SEEK_PUSHED:\r\n            const { seekToSeconds } = action.payload;\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                pendingSeeks: [\r\n                    ...state[action.payload.id].pendingSeeks,\r\n                    seekToSeconds,\r\n                ],\r\n            } };\r\n\r\n        case PLAYER_PENDING_SEEK_POPPED:\r\n            return { ...state, [action.payload.id]: {\r\n                ...state[action.payload.id],\r\n                pendingSeeks: [\r\n                    ...state[action.payload.id].pendingSeeks.slice(1),\r\n                ],\r\n            } };\r\n\r\n        case PLAYER_DELETED:\r\n            return omit(action.payload.id, state);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import memoize from 'fast-memoize';\r\nimport { createSelector } from 'reselect';\r\nimport { compose, entries, get, getOr, reduce } from 'lodash/fp';\r\nimport { getMasterPlayerPlayedSeconds } from '../masterPlayerInfo/selectors';\r\nimport { getPlayerOffset } from '../offsets/selectors';\r\nimport { State } from '../types';\r\nimport { PlayerInfo, PlayersInfoState } from './types';\r\nimport { playerInfoInitialState } from './reducer';\r\n\r\nexport const getPlayersInfoState = (state: State) => state.playersInfo;\r\n\r\nconst getPlayerInfoBase = (id: string) => createSelector(\r\n    getPlayersInfoState,\r\n    getOr(playerInfoInitialState, id),\r\n);\r\nexport const getPlayerInfo = memoize(getPlayerInfoBase);\r\n\r\nconst getIsPlayerPlayingBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    getOr(false, 'isPlaying'),\r\n);\r\nexport const getIsPlayerPlaying = memoize(getIsPlayerPlayingBase);\r\n\r\nconst getIsPlayerBufferingBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    getOr(false, 'isBuffering'),\r\n);\r\nexport const getIsPlayerBuffering = memoize(getIsPlayerBufferingBase);\r\n\r\nconst getPlayerDurationSecondsBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    getOr(0, 'durationSeconds'),\r\n);\r\nexport const getPlayerDurationSeconds = memoize(getPlayerDurationSecondsBase);\r\n\r\nconst getPlayerPlayedTimeBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    ({ playedSeconds, playedFraction }: PlayerInfo) => ({ playedSeconds, playedFraction }),\r\n);\r\nexport const getPlayerPlayedTime = memoize(getPlayerPlayedTimeBase);\r\n\r\nconst getPlayerPlayedSecondsBase = (id: string) => createSelector(\r\n    getPlayerPlayedTime(id),\r\n    getOr(0, 'playedSeconds'),\r\n);\r\nexport const getPlayerPlayedSeconds = memoize(getPlayerPlayedSecondsBase);\r\n\r\nconst getPlayerPlayedFractionBase = (id: string) => createSelector(\r\n    getPlayerPlayedTime(id),\r\n    getOr(0, 'playedFraction'),\r\n);\r\nexport const getPlayerPlayedFraction = memoize(getPlayerPlayedFractionBase);\r\n\r\nconst getPlayerLoadedTimeBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    ({ loadedSeconds, loadedFraction }: PlayerInfo) => ({ loadedSeconds, loadedFraction }),\r\n);\r\nexport const getPlayerLoadedTime = memoize(getPlayerLoadedTimeBase);\r\n\r\nconst getPlayerLoadedSecondsBase = (id: string) => createSelector(\r\n    getPlayerLoadedTime(id),\r\n    getOr(0, 'loadedSeconds'),\r\n);\r\nexport const getPlayerLoadedSeconds = memoize(getPlayerLoadedSecondsBase);\r\n\r\nconst getPlayerLoadedFractionBase = (id: string) => createSelector(\r\n    getPlayerLoadedTime(id),\r\n    getOr(0, 'loadedFraction'),\r\n);\r\nexport const getPlayerLoadedFraction = memoize(getPlayerLoadedFractionBase);\r\n\r\nconst hasPlayerEndedBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    getOr(false, 'hasEnded'),\r\n);\r\nexport const hasPlayerEnded = memoize(hasPlayerEndedBase);\r\n\r\nconst getPlayerVolumeBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    getOr(1, 'volume'),\r\n);\r\nexport const getPlayerVolume = memoize(getPlayerVolumeBase);\r\n\r\nconst getIsPlayerMutedBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    getOr(false, 'isMuted'),\r\n);\r\nexport const getIsPlayerMuted = memoize(getIsPlayerMutedBase);\r\n\r\nconst getPlayerPendingSeeksBase = (id: string) => createSelector(\r\n    getPlayerInfo(id),\r\n    getOr([], 'pendingSeeks'),\r\n);\r\nexport const getPlayerPendingSeeks = memoize(getPlayerPendingSeeksBase);\r\n\r\nexport const getMaxDurationPlayerId = createSelector<State, PlayersInfoState, string | null>(\r\n    getPlayersInfoState,\r\n    compose(\r\n        get('id'),\r\n        reduce<[string, PlayerInfo], { duration: number; id: string | null }>(\r\n            (acc, curr) => {\r\n                const [playerId, playerInfo] = curr;\r\n\r\n                if (playerInfo.durationSeconds > acc.duration) {\r\n                    return {\r\n                        duration: playerInfo.durationSeconds,\r\n                        id: playerId,\r\n                    };\r\n                }\r\n\r\n                return acc;\r\n            },\r\n            { duration: 0, id: null },\r\n        ),\r\n        entries,\r\n    ),\r\n);\r\n\r\nexport const getMaxDuration = createSelector(\r\n    getPlayersInfoState,\r\n    getMaxDurationPlayerId,\r\n    (playersInfo: PlayersInfoState, maxDurationPlayerId: string | null) => maxDurationPlayerId ? get(maxDurationPlayerId, playersInfo).durationSeconds : 0,\r\n);\r\n\r\nconst shouldPlayerCurrentlyPlayBase = (id: string) => createSelector(\r\n    getPlayerDurationSeconds(id),\r\n    getPlayerOffset(id),\r\n    getMasterPlayerPlayedSeconds,\r\n    (playerDuration: number, playerOffset: number, masterPlayedSeconds: number) => (\r\n        -playerOffset <= masterPlayedSeconds && masterPlayedSeconds <= playerDuration - playerOffset\r\n    ),\r\n);\r\nexport const shouldPlayerCurrentlyPlay = memoize(shouldPlayerCurrentlyPlayBase);\r\n\r\nexport const areAllCorrectPlayersPlaying = (state: State) => (\r\n    Object.entries(getPlayersInfoState(state)).every(([playerId, playerInfo]) => (\r\n        !shouldPlayerCurrentlyPlay(playerId)(state) || (playerInfo.isPlaying && shouldPlayerCurrentlyPlay(playerId)(state))\r\n    ))\r\n);\r\n","import memoize from 'fast-memoize';\r\nimport { createSelector } from 'reselect';\r\nimport { contains, get, getOr } from 'lodash/fp';\r\nimport { State } from '../types';\r\nimport { getPlayersInfoState } from '../playersInfo/selectors';\r\nimport { getMasterPlayerInfo } from '../masterPlayerInfo/selectors';\r\nimport { SettingsState, ControlsMode, Layout } from './types';\r\n\r\nexport const getSettingsState = (state: State) => state.settings;\r\n\r\nexport const getIsFullscreen = createSelector<State, SettingsState, boolean>(\r\n    getSettingsState,\r\n    get('isFullscreen'),\r\n);\r\n\r\nexport const getControlsMode = createSelector<State, SettingsState, ControlsMode>(\r\n    getSettingsState,\r\n    get('controlsMode'),\r\n);\r\n\r\nexport const getLayout = createSelector<State, SettingsState, Layout>(\r\n    getSettingsState,\r\n    get('layout'),\r\n);\r\n\r\nexport const getMainPlayerIds = createSelector<State, SettingsState, string[]>(\r\n    getSettingsState,\r\n    get('mainPlayerIds'),\r\n);\r\n\r\nexport const getSecondaryPlayerIds = createSelector<State, SettingsState, string[]>(\r\n    getSettingsState,\r\n    get('secondaryPlayerIds'),\r\n);\r\n\r\nconst getIsPlayerMainBase = (id: string) => createSelector<State, string[], boolean>(\r\n    getMainPlayerIds,\r\n    contains(id),\r\n);\r\nexport const getIsPlayerMain = memoize(getIsPlayerMainBase);\r\n\r\nconst getIsPlayerSecondaryBase = (id: string) => createSelector<State, string[], boolean>(\r\n    getSecondaryPlayerIds,\r\n    contains(id),\r\n);\r\nexport const getIsPlayerSecondary = memoize(getIsPlayerSecondaryBase);\r\n\r\nconst canMovePlayerLeftBase = (id: string) => createSelector<State, string[], string[], Layout, boolean>(\r\n    getMainPlayerIds,\r\n    getSecondaryPlayerIds,\r\n    getLayout,\r\n    (mainPlayerIds, secondaryPlayerIds, layout) => {\r\n        const indexInMain = mainPlayerIds.indexOf(id);\r\n        const indexInSecondary = secondaryPlayerIds.indexOf(id);\r\n\r\n        if (indexInMain === 0) {\r\n            return false;\r\n        }\r\n\r\n        if (indexInSecondary === 0 && layout === Layout.Overlay) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    },\r\n);\r\nexport const canMovePlayerLeft = memoize(canMovePlayerLeftBase);\r\n\r\nconst canMovePlayerRightBase = (id: string) => createSelector<State, string[], string[], Layout, boolean>(\r\n    getMainPlayerIds,\r\n    getSecondaryPlayerIds,\r\n    getLayout,\r\n    (mainPlayerIds, secondaryPlayerIds, layout) => {\r\n        const indexInMain = mainPlayerIds.indexOf(id);\r\n        const indexInSecondary = secondaryPlayerIds.indexOf(id);\r\n\r\n        if (indexInSecondary === secondaryPlayerIds.length - 1) {\r\n            return false;\r\n        }\r\n\r\n        if (indexInMain === mainPlayerIds.length - 1 && layout === Layout.Overlay) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    },\r\n);\r\nexport const canMovePlayerRight = memoize(canMovePlayerRightBase);\r\n\r\nexport const getFocusedPlayerId = createSelector<State, SettingsState, string | null>(\r\n    getSettingsState,\r\n    get('focusedPlayerId'),\r\n);\r\n\r\nexport const getFocusedPlayerInfo = createSelector(\r\n    getFocusedPlayerId,\r\n    getPlayersInfoState,\r\n    getMasterPlayerInfo,\r\n    (focusedPlayerId, playersInfo, masterPlayerInfo) => {\r\n        if (focusedPlayerId) {\r\n            return playersInfo[focusedPlayerId];\r\n        }\r\n\r\n        return masterPlayerInfo;\r\n    },\r\n);\r\n\r\nexport const getIsFocusedPlayerPlaying = createSelector(\r\n    getFocusedPlayerInfo,\r\n    getOr(false, 'isPlaying'),\r\n);\r\n\r\nexport const getFocusedPlayerDurationSeconds = createSelector(\r\n    getFocusedPlayerInfo,\r\n    getOr(0, 'durationSeconds'),\r\n);\r\n\r\nexport const getFocusedPlayerPlayedSeconds = createSelector(\r\n    getFocusedPlayerInfo,\r\n    getOr(0, 'playedSeconds'),\r\n);\r\n\r\nexport const getFocusedPlayerVolume = createSelector(\r\n    getFocusedPlayerInfo,\r\n    getOr(1, 'volume'),\r\n);\r\n\r\nexport const getIsFocusedPlayerMuted = createSelector(\r\n    getFocusedPlayerInfo,\r\n    getOr(false, 'isMuted'),\r\n);\r\n","import {\r\n    PlayerInitializedAction,\r\n    PlayerReadyAction,\r\n    PlayerStartedPlayingAction,\r\n    PlayerStoppedPlayingAction,\r\n    PlayerStartedBufferingAction,\r\n    PlayerStoppedBufferingAction,\r\n    PlayerVideoEndedAction,\r\n    PlayerVideoRestartedAction,\r\n    PlayerDurationUpdatedAction,\r\n    PlayerPlayedTimeUpdatedAction,\r\n    PlayerLoadedTimeUpdatedAction,\r\n    PlayerProgressUpdatedAction,\r\n    PlayerVolumeUpdatedAction,\r\n    PlayerMutedAction,\r\n    PlayerUnmutedAction,\r\n    PlayerPendingSeekPushedAction,\r\n    PlayerPendingSeekPoppedAction,\r\n    PlayerDeletedAction,\r\n    PLAYER_INITIALIZED,\r\n    PLAYER_READY,\r\n    PLAYER_STARTED_PLAYING,\r\n    PLAYER_STOPPED_PLAYING,\r\n    PLAYER_STARTED_BUFFERING,\r\n    PLAYER_STOPPED_BUFFERING,\r\n    PLAYER_VIDEO_ENDED,\r\n    PLAYER_VIDEO_RESTARTED,\r\n    PLAYER_DURATION_UPDATED,\r\n    PLAYER_PLAYED_TIME_UPDATED,\r\n    PLAYER_LOADED_TIME_UPDATED,\r\n    PLAYER_PROGRESS_UPDATED,\r\n    PLAYER_VOLUME_UPDATED,\r\n    PLAYER_MUTED,\r\n    PLAYER_UNMUTED,\r\n    PLAYER_PENDING_SEEK_PUSHED,\r\n    PLAYER_PENDING_SEEK_POPPED,\r\n    PLAYER_DELETED,\r\n} from './types';\r\n\r\nexport const initializePlayer = (id: string): PlayerInitializedAction => ({\r\n    type: PLAYER_INITIALIZED,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerReady = (id: string): PlayerReadyAction => ({\r\n    type: PLAYER_READY,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerStartPlaying = (id: string): PlayerStartedPlayingAction => ({\r\n    type: PLAYER_STARTED_PLAYING,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerStopPlaying = (id: string): PlayerStoppedPlayingAction => ({\r\n    type: PLAYER_STOPPED_PLAYING,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerStartBuffering = (id: string): PlayerStartedBufferingAction => ({\r\n    type: PLAYER_STARTED_BUFFERING,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerStopBuffering = (id: string): PlayerStoppedBufferingAction => ({\r\n    type: PLAYER_STOPPED_BUFFERING,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerEndVideo = (id: string): PlayerVideoEndedAction => ({\r\n    type: PLAYER_VIDEO_ENDED,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerRestartVideo = (id: string): PlayerVideoRestartedAction => ({\r\n    type: PLAYER_VIDEO_RESTARTED,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerUpdateDuration = (id: string, { durationSeconds }: { durationSeconds: number }): PlayerDurationUpdatedAction => ({\r\n    type: PLAYER_DURATION_UPDATED,\r\n    payload: { id, durationSeconds },\r\n});\r\n\r\ninterface PlayedProgress {\r\n    playedSeconds: number;\r\n    playedFraction: number;\r\n}\r\n\r\nexport const playerUpdatePlayedTime = (id: string, { playedSeconds, playedFraction }: PlayedProgress): PlayerPlayedTimeUpdatedAction => ({\r\n    type: PLAYER_PLAYED_TIME_UPDATED,\r\n    payload: { id, playedSeconds, playedFraction },\r\n});\r\n\r\ninterface LoadedProgress {\r\n    loadedSeconds: number;\r\n    loadedFraction: number;\r\n}\r\n\r\nexport const playerUpdateLoadedTime = (id: string, { loadedSeconds, loadedFraction }: LoadedProgress): PlayerLoadedTimeUpdatedAction => ({\r\n    type: PLAYER_LOADED_TIME_UPDATED,\r\n    payload: { id, loadedSeconds, loadedFraction },\r\n});\r\n\r\nexport const playerUpdateProgress = (id: string, progress: PlayedProgress & LoadedProgress): PlayerProgressUpdatedAction => ({\r\n    type: PLAYER_PROGRESS_UPDATED,\r\n    payload: { id, ...progress },\r\n});\r\n\r\nexport const playerUpdateVolume = (id: string, { volume }: { volume: number }): PlayerVolumeUpdatedAction => ({\r\n    type: PLAYER_VOLUME_UPDATED,\r\n    payload: { id, volume },\r\n});\r\n\r\nexport const playerMute = (id: string): PlayerMutedAction => ({\r\n    type: PLAYER_MUTED,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerUnmute = (id: string): PlayerUnmutedAction => ({\r\n    type: PLAYER_UNMUTED,\r\n    payload: { id },\r\n});\r\n\r\nexport const playerPushPendingSeek = (id: string, { seekToSeconds }: { seekToSeconds: number }): PlayerPendingSeekPushedAction => ({\r\n    type: PLAYER_PENDING_SEEK_PUSHED,\r\n    payload: { id, seekToSeconds },\r\n});\r\n\r\nexport const playerPopPendingSeek = (id: string): PlayerPendingSeekPoppedAction => ({\r\n    type: PLAYER_PENDING_SEEK_POPPED,\r\n    payload: { id },\r\n});\r\n\r\nexport const deletePlayer = (id: string): PlayerDeletedAction => ({\r\n    type: PLAYER_DELETED,\r\n    payload: { id },\r\n});\r\n","import { AppThunkAction } from '../types';\r\nimport { playerEndVideo, playerPushPendingSeek, playerRestartVideo, playerStartPlaying, playerStopPlaying } from '../playersInfo/actions';\r\nimport { getPlayersInfoState, shouldPlayerCurrentlyPlay } from '../playersInfo/selectors';\r\nimport { getPlayerOffset } from '../offsets/selectors';\r\nimport { getMasterPlayerInfo } from './selectors';\r\nimport {\r\n    MasterPlayerReadyAction,\r\n    MasterPlayerNotReadyAction,\r\n    MasterPlayerStartedPlayingAction,\r\n    MasterPlayerStoppedPlayingAction,\r\n    MasterPlayerStartedBufferingAction,\r\n    MasterPlayerStoppedBufferingAction,\r\n    MasterPlayerEndedAction,\r\n    MasterPlayerDurationUpdatedAction,\r\n    MasterPlayerPlayedTimeUpdatedAction,\r\n    MasterPlayerLoadedTimeUpdatedAction,\r\n    MasterPlayerProgressUpdatedAction,\r\n    MasterPlayerVolumeUpdatedAction,\r\n    MasterPlayerMutedAction,\r\n    MasterPlayerUnmutedAction,\r\n    MasterPlayerPendingSeekSetAction,\r\n    MasterPlayerPendingSeekRemovedAction,\r\n    MASTER_PLAYER_READY,\r\n    MASTER_PLAYER_NOT_READY,\r\n    MASTER_PLAYER_STARTED_PLAYING,\r\n    MASTER_PLAYER_STOPPED_PLAYING,\r\n    MASTER_PLAYER_STARTED_BUFFERING,\r\n    MASTER_PLAYER_STOPPED_BUFFERING,\r\n    MASTER_PLAYER_ENDED,\r\n    MASTER_PLAYER_DURATION_UPDATED,\r\n    MASTER_PLAYER_PLAYED_TIME_UPDATED,\r\n    MASTER_PLAYER_LOADED_TIME_UPDATED,\r\n    MASTER_PLAYER_PROGRESS_UPDATED,\r\n    MASTER_PLAYER_VOLUME_UPDATED,\r\n    MASTER_PLAYER_MUTED,\r\n    MASTER_PLAYER_UNMUTED,\r\n    MASTER_PLAYER_PENDING_SEEK_SET,\r\n    MASTER_PLAYER_PENDING_SEEK_REMOVED,\r\n} from './types';\r\n\r\nexport const masterPlayerReady = (): MasterPlayerReadyAction => ({\r\n    type: MASTER_PLAYER_READY,\r\n});\r\n\r\nexport const masterPlayerNotReady = (): MasterPlayerNotReadyAction => ({\r\n    type: MASTER_PLAYER_NOT_READY,\r\n});\r\n\r\nexport const masterPlayerStartPlaying = (): MasterPlayerStartedPlayingAction => ({\r\n    type: MASTER_PLAYER_STARTED_PLAYING,\r\n});\r\n\r\nexport const masterPlayerStopPlaying = (): MasterPlayerStoppedPlayingAction => ({\r\n    type: MASTER_PLAYER_STOPPED_PLAYING,\r\n});\r\n\r\nexport const masterPlayerStartBuffering = (): MasterPlayerStartedBufferingAction => ({\r\n    type: MASTER_PLAYER_STARTED_BUFFERING,\r\n});\r\n\r\nexport const masterPlayerStopBuffering = (): MasterPlayerStoppedBufferingAction => ({\r\n    type: MASTER_PLAYER_STOPPED_BUFFERING,\r\n});\r\n\r\nexport const masterPlayerEnd = (): MasterPlayerEndedAction => ({\r\n    type: MASTER_PLAYER_ENDED,\r\n});\r\n\r\nexport const masterPlayerUpdateDuration = (durationSeconds: number): MasterPlayerDurationUpdatedAction => ({\r\n    type: MASTER_PLAYER_DURATION_UPDATED,\r\n    payload: { durationSeconds },\r\n});\r\n\r\ninterface PlayedProgress {\r\n    playedSeconds: number;\r\n    playedFraction: number;\r\n}\r\n\r\nexport const masterPlayerUpdatePlayedTime = ({ playedSeconds, playedFraction }: PlayedProgress): MasterPlayerPlayedTimeUpdatedAction => ({\r\n    type: MASTER_PLAYER_PLAYED_TIME_UPDATED,\r\n    payload: { playedSeconds, playedFraction },\r\n});\r\n\r\ninterface LoadedProgress {\r\n    loadedSeconds: number;\r\n    loadedFraction: number;\r\n}\r\n\r\nexport const masterPlayerUpdateLoadedTime = ({ loadedSeconds, loadedFraction }: LoadedProgress): MasterPlayerLoadedTimeUpdatedAction => ({\r\n    type: MASTER_PLAYER_LOADED_TIME_UPDATED,\r\n    payload: { loadedSeconds, loadedFraction },\r\n});\r\n\r\nexport const masterPlayerUpdateProgress = (progress: PlayedProgress & LoadedProgress): MasterPlayerProgressUpdatedAction => ({\r\n    type: MASTER_PLAYER_PROGRESS_UPDATED,\r\n    payload: { ...progress },\r\n});\r\n\r\nexport const masterPlayerUpdateVolume = (volume: number): MasterPlayerVolumeUpdatedAction => ({\r\n    type: MASTER_PLAYER_VOLUME_UPDATED,\r\n    payload: { volume },\r\n});\r\n\r\nexport const masterPlayerMute = (): MasterPlayerMutedAction => ({\r\n    type: MASTER_PLAYER_MUTED,\r\n});\r\n\r\nexport const masterPlayerUnmute = (): MasterPlayerUnmutedAction => ({\r\n    type: MASTER_PLAYER_UNMUTED,\r\n});\r\n\r\nexport const masterPlayerSetPendingSeek = (seekToSeconds: number): MasterPlayerPendingSeekSetAction => ({\r\n    type: MASTER_PLAYER_PENDING_SEEK_SET,\r\n    payload: { seekToSeconds },\r\n});\r\n\r\nexport const masterPlayerRemovePendingSeek = (): MasterPlayerPendingSeekRemovedAction => ({\r\n    type: MASTER_PLAYER_PENDING_SEEK_REMOVED,\r\n});\r\n\r\nexport const startPlayback = (): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const {\r\n        isReady: isMasterReady,\r\n        isBuffering: isMasterBuffering,\r\n    } = getMasterPlayerInfo(state);\r\n\r\n    if (isMasterReady && !isMasterBuffering) {\r\n        Object.keys(getPlayersInfoState(state)).forEach(id => {\r\n            if (shouldPlayerCurrentlyPlay(id)(state)) {\r\n                dispatch(playerStartPlaying(id));\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const stopPlayback = (): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    Object.keys(state.playersInfo).forEach(id => dispatch(playerStopPlaying(id)));\r\n};\r\n\r\nexport const seekTo = (seconds: number): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    dispatch(masterPlayerSetPendingSeek(seconds));\r\n\r\n    Object.entries(getPlayersInfoState(state)).forEach(([playerId, playerInfo]) => {\r\n        const { playedSeconds, durationSeconds } = playerInfo;\r\n        const playerOffset = getPlayerOffset(playerId)(state);\r\n\r\n        if (-playerOffset > seconds) {\r\n            if (playedSeconds > 0) {\r\n                dispatch(playerPushPendingSeek(playerId, { seekToSeconds: 0 }));\r\n            }\r\n\r\n            dispatch(playerStopPlaying(playerId));\r\n        } else if (seconds >= durationSeconds - playerOffset) {\r\n            if (playedSeconds < durationSeconds) {\r\n                dispatch(playerPushPendingSeek(playerId, { seekToSeconds: durationSeconds }));\r\n            }\r\n\r\n            dispatch(playerStopPlaying(playerId));\r\n            dispatch(playerEndVideo(playerId));\r\n        } else {\r\n            const playerPlayedTime = seconds + playerOffset;\r\n            dispatch(playerRestartVideo(playerId));\r\n            dispatch(playerPushPendingSeek(playerId, { seekToSeconds: playerPlayedTime }));\r\n\r\n            if (getMasterPlayerInfo(state).isPlaying) {\r\n                dispatch(playerStartPlaying(playerId));\r\n            }\r\n        }\r\n    });\r\n};\r\n","import { AppThunkAction } from '../types';\r\nimport { getOffsets } from './selectors';\r\nimport { OffsetsReferencePlayerIdChangedAction, PlayerOffsetChangedAction, PlayerOffsetRemovedAction, OFFSETS_REFERENCE_PLAYER_ID_CHANGED, PLAYER_OFFSET_CHANGED, PLAYER_OFFSET_REMOVED } from './types';\r\n\r\nexport const changeOffsetsReferencePlayerId = (referenceId: string | null): OffsetsReferencePlayerIdChangedAction => ({\r\n    type: OFFSETS_REFERENCE_PLAYER_ID_CHANGED,\r\n    payload: { referenceId },\r\n});\r\n\r\nexport const changePlayerOffset = (id: string, { offset }: { offset: number }): PlayerOffsetChangedAction => ({\r\n    type: PLAYER_OFFSET_CHANGED,\r\n    payload: { id, offset },\r\n});\r\n\r\nexport const removePlayerOffset = (id: string): PlayerOffsetRemovedAction => ({\r\n    type: PLAYER_OFFSET_REMOVED,\r\n    payload: { id },\r\n});\r\n\r\nexport const normalizeOffsets = (): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const { maxOffset, maxOffsetPlayerId } = Object.entries(getOffsets(state)).reduce(\r\n        (acc, [playerId, playerOffset]) => {\r\n            if (playerOffset > acc.maxOffset) {\r\n                return {\r\n                    maxOffset: playerOffset,\r\n                    maxOffsetPlayerId: playerId,\r\n                };\r\n            }\r\n\r\n            return acc;\r\n        },\r\n        {\r\n            maxOffset: -Infinity,\r\n            maxOffsetPlayerId: '',\r\n        },\r\n    );\r\n\r\n    if (maxOffsetPlayerId !== '' && Math.abs(maxOffset) > 1.5) {\r\n        dispatch(changeOffsetsReferencePlayerId(maxOffsetPlayerId));\r\n        dispatch(changePlayerOffset(maxOffsetPlayerId, { offset: 0 }));\r\n        \r\n        Object.entries(getOffsets(state)).forEach(([playerId, playerOffset]) => {\r\n            if (playerId !== maxOffsetPlayerId) {\r\n                dispatch(changePlayerOffset(playerId, {\r\n                    offset: playerOffset - maxOffset,\r\n                }));\r\n            }\r\n        });\r\n    }\r\n};\r\n","import { AppThunkAction } from '../types';\r\nimport { getIsFullscreen, getLayout, getMainPlayerIds, getSecondaryPlayerIds } from './selectors';\r\nimport {\r\n    ControlsMode,\r\n    Layout,\r\n    SettingsFullscreenEnteredAction,\r\n    SettingsFullscreenExitedAction,\r\n    SettingsControlsModeChangedAction,\r\n    SettingsLayoutChangedAction,\r\n    SettingsFocusedPlayerIdChangedAction,\r\n    SettingsMainPlayerIdsChangedAction,\r\n    SettingsSecondaryPlayerIdsChangedAction,\r\n    SETTINGS_FULLSCREEN_ENTERED,\r\n    SETTINGS_FULLSCREEN_EXITED,\r\n    SETTINGS_CONTROLS_MODE_CHANGED,\r\n    SETTINGS_LAYOUT_CHANGED,\r\n    SETTINGS_FOCUSED_PLAYER_ID_CHANGED,\r\n    SETTINGS_MAIN_PLAYER_IDS_CHANGED,\r\n    SETTINGS_SECONDARY_PLAYER_IDS_CHANGED,\r\n    SettingsMainAndSecondaryPlayerIdsChanged,\r\n    SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED,\r\n} from './types';\r\n\r\nexport const setFullscreenOn = (): SettingsFullscreenEnteredAction => ({\r\n    type: SETTINGS_FULLSCREEN_ENTERED,\r\n});\r\n\r\nexport const setFullscreenOff = (): SettingsFullscreenExitedAction => ({\r\n    type: SETTINGS_FULLSCREEN_EXITED,\r\n});\r\n\r\nexport const changeControlsMode = (controlsMode: ControlsMode): SettingsControlsModeChangedAction => ({\r\n    type: SETTINGS_CONTROLS_MODE_CHANGED,\r\n    payload: { controlsMode },\r\n});\r\n\r\nexport const changeLayout = (layout: Layout): SettingsLayoutChangedAction => ({\r\n    type: SETTINGS_LAYOUT_CHANGED,\r\n    payload: { layout },\r\n});\r\n\r\nexport const changeFocusedPlayerId = (focusedPlayerId: string | null): SettingsFocusedPlayerIdChangedAction => ({\r\n    type: SETTINGS_FOCUSED_PLAYER_ID_CHANGED,\r\n    payload: { focusedPlayerId },\r\n});\r\n\r\nexport const setMainPlayerIds = (mainPlayerIds: string[]): SettingsMainPlayerIdsChangedAction => ({\r\n    type: SETTINGS_MAIN_PLAYER_IDS_CHANGED,\r\n    payload: { mainPlayerIds },\r\n});\r\n\r\nexport const setSecondaryPlayerIds = (secondaryPlayerIds: string[]): SettingsSecondaryPlayerIdsChangedAction => ({\r\n    type: SETTINGS_SECONDARY_PLAYER_IDS_CHANGED,\r\n    payload: { secondaryPlayerIds },\r\n});\r\n\r\nexport const setMainAndSecondaryPlayerIds = (payload: { mainPlayerIds: string[]; secondaryPlayerIds: string[] }): SettingsMainAndSecondaryPlayerIdsChanged => ({\r\n    type: SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED,\r\n    payload,\r\n});\r\n\r\nexport const enterFullscreen = (): AppThunkAction => dispatch => {\r\n    dispatch(setFullscreenOn());\r\n    dispatch(changeControlsMode(ControlsMode.Grouped));\r\n};\r\n\r\nexport const exitFullscreen = (): AppThunkAction => dispatch => {\r\n    dispatch(setFullscreenOff());\r\n    dispatch(changeControlsMode(ControlsMode.Individual));\r\n};\r\n\r\nexport const toggleFullscreen = (): AppThunkAction => (dispatch, getState) => {\r\n    const isFullscreen = getIsFullscreen(getState());\r\n\r\n    if (isFullscreen) {\r\n        dispatch(exitFullscreen());\r\n    } else {\r\n        dispatch(enterFullscreen());\r\n    }\r\n};\r\n\r\nexport const movePlayerToMainPlayers = (playerId: string): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const mainPlayerIds = getMainPlayerIds(state);\r\n    const secondaryPlayerIds = getSecondaryPlayerIds(state);\r\n\r\n    dispatch(setMainAndSecondaryPlayerIds({\r\n        mainPlayerIds: [...mainPlayerIds, playerId],\r\n        secondaryPlayerIds: secondaryPlayerIds.filter(id => id !== playerId),\r\n    }));\r\n};\r\n\r\nexport const movePlayerToSecondaryPlayers = (playerId: string): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const mainPlayerIds = getMainPlayerIds(state);\r\n    const secondaryPlayerIds = getSecondaryPlayerIds(state);\r\n\r\n    dispatch(setMainAndSecondaryPlayerIds({\r\n        mainPlayerIds: mainPlayerIds.filter(id => id !== playerId),\r\n        secondaryPlayerIds: [...secondaryPlayerIds, playerId],\r\n    }));\r\n};\r\n\r\nexport const makePlayerMain = (playerId: string): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const mainPlayerIds = getMainPlayerIds(state);\r\n    const secondaryPlayerIds = getSecondaryPlayerIds(state);\r\n\r\n    dispatch(setMainAndSecondaryPlayerIds({\r\n        mainPlayerIds: [playerId],\r\n        secondaryPlayerIds: [...mainPlayerIds, ...secondaryPlayerIds].filter(id => id !== playerId),\r\n    }));\r\n};\r\n\r\nexport const movePlayerLeft = (playerId: string): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const layout = getLayout(state);\r\n    let mainPlayerIds = [...getMainPlayerIds(state)];\r\n    let secondaryPlayerIds = [...getSecondaryPlayerIds(state)];\r\n\r\n    const indexInMain = mainPlayerIds.indexOf(playerId);\r\n    const indexInSecondary = secondaryPlayerIds.indexOf(playerId);\r\n\r\n    if (indexInMain > 0) {\r\n        mainPlayerIds[indexInMain] = mainPlayerIds[indexInMain - 1];\r\n        mainPlayerIds[indexInMain - 1] = playerId;\r\n    } else if (indexInSecondary > 0) {\r\n        secondaryPlayerIds[indexInSecondary] = secondaryPlayerIds[indexInSecondary - 1];\r\n        secondaryPlayerIds[indexInSecondary - 1] = playerId;\r\n    } else if (indexInSecondary === 0) {\r\n        if (layout === Layout.Grid) {\r\n            secondaryPlayerIds[0] = mainPlayerIds[mainPlayerIds.length - 1];\r\n            mainPlayerIds[mainPlayerIds.length - 1] = playerId;\r\n        } else {\r\n            mainPlayerIds = [...mainPlayerIds, playerId];\r\n            secondaryPlayerIds = secondaryPlayerIds.slice(1, secondaryPlayerIds.length);\r\n        }\r\n    }\r\n\r\n    dispatch(setMainAndSecondaryPlayerIds({\r\n        mainPlayerIds: [...mainPlayerIds],\r\n        secondaryPlayerIds: [...secondaryPlayerIds],\r\n    }));\r\n};\r\n\r\nexport const movePlayerRight = (playerId: string): AppThunkAction => (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const layout = getLayout(state);\r\n    let mainPlayerIds = [...getMainPlayerIds(state)];\r\n    let secondaryPlayerIds = [...getSecondaryPlayerIds(state)];\r\n\r\n    const indexInMain = mainPlayerIds.indexOf(playerId);\r\n    const indexInSecondary = secondaryPlayerIds.indexOf(playerId);\r\n\r\n    if (indexInMain !== -1 && indexInMain < mainPlayerIds.length - 1) {\r\n        mainPlayerIds[indexInMain] = mainPlayerIds[indexInMain + 1];\r\n        mainPlayerIds[indexInMain + 1] = playerId;\r\n    } else if (indexInMain === mainPlayerIds.length - 1) {\r\n        if (layout === Layout.Grid) {\r\n            mainPlayerIds[indexInMain] = secondaryPlayerIds[0];\r\n            secondaryPlayerIds[0] = playerId;\r\n        } else {\r\n            mainPlayerIds = mainPlayerIds.slice(0, mainPlayerIds.length - 1);\r\n            secondaryPlayerIds = [playerId, ...secondaryPlayerIds];\r\n        }\r\n    } else if (indexInSecondary !== -1 && indexInSecondary < secondaryPlayerIds.length - 1) {\r\n        secondaryPlayerIds[indexInSecondary] = secondaryPlayerIds[indexInSecondary + 1];\r\n        secondaryPlayerIds[indexInSecondary + 1] = playerId;\r\n    }\r\n\r\n    dispatch(setMainAndSecondaryPlayerIds({\r\n        mainPlayerIds: [...mainPlayerIds],\r\n        secondaryPlayerIds: [...secondaryPlayerIds],\r\n    }));\r\n};\r\n","import { Middleware } from 'redux';\r\nimport {\r\n    Action,\r\n    AppThunkDispatch,\r\n    State,\r\n    PlayerInfo,\r\n    VIDEOS_ADDED,\r\n    VIDEO_DELETED,\r\n    PLAYER_OFFSET_CHANGED,\r\n    PLAYER_LOADED_TIME_UPDATED,\r\n    PLAYER_PLAYED_TIME_UPDATED,\r\n    PLAYER_PROGRESS_UPDATED,\r\n    PLAYER_READY,\r\n    PLAYER_STARTED_BUFFERING,\r\n    PLAYER_STARTED_PLAYING,\r\n    PLAYER_STOPPED_BUFFERING,\r\n    PLAYER_STOPPED_PLAYING,\r\n    MASTER_PLAYER_PLAYED_TIME_UPDATED,\r\n} from '../types';\r\nimport {\r\n    getOffsets,\r\n    getPlayerOffset,\r\n    getPlayersInfoState,\r\n    getPlayerDurationSeconds,\r\n    getPlayerInfo,\r\n    getMasterPendingSeek,\r\n    getMasterPlayerDurationSeconds,\r\n    getMasterPlayerPlayedSeconds,\r\n} from '../selectors';\r\nimport {\r\n    masterPlayerReady,\r\n    masterPlayerNotReady,\r\n    masterPlayerStartPlaying,\r\n    masterPlayerStopPlaying,\r\n    masterPlayerStartBuffering,\r\n    masterPlayerStopBuffering,\r\n    masterPlayerUpdateDuration,\r\n    masterPlayerUpdatePlayedTime,\r\n    masterPlayerUpdateLoadedTime,\r\n    masterPlayerRemovePendingSeek,\r\n    masterPlayerUpdateProgress,\r\n} from '../actions';\r\n\r\nconst everyOtherPlayer = (condition: (playerInfo: PlayerInfo) => boolean, state: State, currentId: string) => (\r\n    Object.entries(getPlayersInfoState(state)).every(([id, playerInfo]) => id === currentId || condition(playerInfo))\r\n);\r\n\r\nexport const masterPlayerMiddleware: Middleware<{}, State, AppThunkDispatch> = store => next => (action: Action) => {\r\n    const { dispatch, getState } = store;\r\n\r\n    next(action);\r\n    const state = getState();\r\n\r\n    switch (action.type) {\r\n        case PLAYER_READY:\r\n            if (everyOtherPlayer(player => player.isReady, state, action.payload.id)) {\r\n                dispatch(masterPlayerReady());\r\n            }\r\n            break;\r\n\r\n        case PLAYER_STARTED_PLAYING:\r\n            dispatch(masterPlayerStartPlaying());\r\n            break;\r\n\r\n        case PLAYER_STOPPED_PLAYING:\r\n            if (everyOtherPlayer(player => !player.isPlaying, state, action.payload.id)) {\r\n                dispatch(masterPlayerStopPlaying());\r\n            }\r\n            break;\r\n\r\n        case PLAYER_STARTED_BUFFERING:\r\n            if (!getPlayerInfo(action.payload.id)(state).hasEnded) {\r\n                dispatch(masterPlayerStartBuffering());\r\n            }\r\n            break;\r\n\r\n        case PLAYER_STOPPED_BUFFERING:\r\n            if (everyOtherPlayer(player => (!player.isBuffering || player.hasEnded), state, action.payload.id)) {\r\n                dispatch(masterPlayerStopBuffering());\r\n            }\r\n            break;\r\n\r\n        case PLAYER_PLAYED_TIME_UPDATED:\r\n        case PLAYER_LOADED_TIME_UPDATED:\r\n        case PLAYER_PROGRESS_UPDATED:\r\n        case PLAYER_OFFSET_CHANGED:\r\n            let masterDurationSeconds = getMasterPlayerDurationSeconds(state);\r\n\r\n            if (action.type === PLAYER_OFFSET_CHANGED) {\r\n                const newMasterDurationSeconds = Object.entries(getOffsets(state)).reduce(\r\n                    (acc, curr) => {\r\n                        const [playerId, offset] = curr;\r\n                        const playerDuration = getPlayerDurationSeconds(playerId)(state);\r\n\r\n                        return Math.max(acc, playerDuration - offset);\r\n                    },\r\n                    0,\r\n                );\r\n\r\n                // Account for slight delays in onProgress calls.\r\n                if (Math.abs(newMasterDurationSeconds - masterDurationSeconds) >= 1) {\r\n                    masterDurationSeconds = newMasterDurationSeconds;\r\n                    dispatch(masterPlayerUpdateDuration(newMasterDurationSeconds));\r\n                }\r\n            }\r\n\r\n            if (action.type === PLAYER_PLAYED_TIME_UPDATED || action.type === PLAYER_PROGRESS_UPDATED || action.type === PLAYER_OFFSET_CHANGED) {\r\n                const masterPlayedSeconds = Object.entries(getPlayersInfoState(state)).reduce(\r\n                    (acc, curr) => {\r\n                        const [playerId, playerInfo] = curr;\r\n                        const { playedSeconds, hasEnded } = playerInfo;\r\n                        const offset = getPlayerOffset(playerId)(state);\r\n\r\n                        if (hasEnded) {\r\n                            return acc;\r\n                        }\r\n\r\n                        return Math.min(acc, playedSeconds - offset);\r\n                    },\r\n                    masterDurationSeconds,\r\n                );\r\n\r\n                const masterPlayedFraction = masterPlayedSeconds / masterDurationSeconds;\r\n\r\n                dispatch(masterPlayerUpdatePlayedTime({\r\n                    playedSeconds: masterPlayedSeconds,\r\n                    playedFraction: masterPlayedFraction,\r\n                }));\r\n            }\r\n\r\n            if (action.type === PLAYER_LOADED_TIME_UPDATED || action.type === PLAYER_PROGRESS_UPDATED || action.type === PLAYER_OFFSET_CHANGED) {\r\n                const masterLoadedSeconds = Object.entries(getPlayersInfoState(state)).reduce(\r\n                    (acc, curr) => {\r\n                        const [playerId, playerInfo] = curr;\r\n                        const { loadedSeconds, durationSeconds, hasEnded } = playerInfo;\r\n                        const offset = getPlayerOffset(playerId)(state);\r\n\r\n                        // If a player is completely loaded, it should not affect the overall loaded time.\r\n                        if (hasEnded || loadedSeconds >= (durationSeconds - 0.01)) {\r\n                            return acc;\r\n                        }\r\n\r\n                        return Math.min(acc, loadedSeconds - offset);\r\n                    },\r\n                    masterDurationSeconds,\r\n                );\r\n\r\n                const masterLoadedFraction = masterLoadedSeconds / masterDurationSeconds;\r\n\r\n                dispatch(masterPlayerUpdateLoadedTime({\r\n                    loadedSeconds: masterLoadedSeconds,\r\n                    loadedFraction: masterLoadedFraction,\r\n                }));\r\n            }\r\n\r\n            break;\r\n\r\n        case MASTER_PLAYER_PLAYED_TIME_UPDATED:\r\n            const pendingSeek = getMasterPendingSeek(state);\r\n            const playedSeconds = getMasterPlayerPlayedSeconds(state);\r\n\r\n            if (pendingSeek && Math.abs(playedSeconds - pendingSeek) < 1) {\r\n                dispatch(masterPlayerRemovePendingSeek());\r\n            }\r\n\r\n            break;\r\n\r\n        case VIDEOS_ADDED:\r\n            dispatch(masterPlayerNotReady());\r\n            break;\r\n\r\n        case VIDEO_DELETED:\r\n            if (Object.keys(getOffsets(state)).length === 1) {\r\n                dispatch(masterPlayerUpdateDuration(0));\r\n                dispatch(masterPlayerUpdateProgress({\r\n                    playedSeconds: 0,\r\n                    playedFraction: 0,\r\n                    loadedSeconds: 0,\r\n                    loadedFraction: 0,\r\n                }));\r\n            }\r\n            break;\r\n    }\r\n};\r\n","import {\r\n    MasterPlayerInfoState,\r\n    MasterPlayerInfoAction,\r\n    MASTER_PLAYER_READY,\r\n    MASTER_PLAYER_NOT_READY,\r\n    MASTER_PLAYER_STARTED_PLAYING,\r\n    MASTER_PLAYER_STOPPED_PLAYING,\r\n    MASTER_PLAYER_STARTED_BUFFERING,\r\n    MASTER_PLAYER_STOPPED_BUFFERING,\r\n    MASTER_PLAYER_ENDED,\r\n    MASTER_PLAYER_DURATION_UPDATED,\r\n    MASTER_PLAYER_PLAYED_TIME_UPDATED,\r\n    MASTER_PLAYER_LOADED_TIME_UPDATED,\r\n    MASTER_PLAYER_PROGRESS_UPDATED,\r\n    MASTER_PLAYER_VOLUME_UPDATED,\r\n    MASTER_PLAYER_MUTED,\r\n    MASTER_PLAYER_UNMUTED,\r\n    MASTER_PLAYER_PENDING_SEEK_SET,\r\n    MASTER_PLAYER_PENDING_SEEK_REMOVED,\r\n} from './types';\r\n\r\nconst masterPlayerInfoInitialState: MasterPlayerInfoState = {\r\n    isReady: false,\r\n    isPlaying: false,\r\n    isBuffering: false,\r\n    hasEnded: false,\r\n    durationSeconds: 0,\r\n    playedSeconds: 0,\r\n    playedFraction: 0,\r\n    loadedSeconds: 0,\r\n    loadedFraction: 0,\r\n    volume: 1,\r\n    isMuted: false,\r\n    pendingSeek: null,\r\n};\r\n\r\nexport const masterPlayerInfoReducer = (state = masterPlayerInfoInitialState, action: MasterPlayerInfoAction) => {\r\n    switch (action.type) {\r\n        case MASTER_PLAYER_READY:\r\n            return { ...state, isReady: true };\r\n\r\n        case MASTER_PLAYER_NOT_READY:\r\n            return { ...state, isReady: false };\r\n\r\n        case MASTER_PLAYER_STARTED_PLAYING:\r\n            return { ...state, isPlaying: true };\r\n\r\n        case MASTER_PLAYER_STOPPED_PLAYING:\r\n            return { ...state, isPlaying: false };\r\n\r\n        case MASTER_PLAYER_STARTED_BUFFERING:\r\n            return { ...state, isBuffering: true };\r\n\r\n        case MASTER_PLAYER_STOPPED_BUFFERING:\r\n            return { ...state, isBuffering: false };\r\n\r\n        case MASTER_PLAYER_ENDED:\r\n            return { ...state, hasEnded: true };\r\n\r\n        case MASTER_PLAYER_VOLUME_UPDATED:\r\n            return { ...state, isMuted: false, ...action.payload };\r\n\r\n        case MASTER_PLAYER_MUTED:\r\n            return { ...state, isMuted: true };\r\n\r\n        case MASTER_PLAYER_UNMUTED:\r\n            return { ...state, isMuted: false };\r\n\r\n        case MASTER_PLAYER_PENDING_SEEK_SET:\r\n            return { ...state, pendingSeek: action.payload.seekToSeconds };\r\n\r\n        case MASTER_PLAYER_PENDING_SEEK_REMOVED:\r\n            return { ...state, pendingSeek: null };\r\n\r\n        case MASTER_PLAYER_DURATION_UPDATED:\r\n        case MASTER_PLAYER_PLAYED_TIME_UPDATED:\r\n        case MASTER_PLAYER_LOADED_TIME_UPDATED:\r\n        case MASTER_PLAYER_PROGRESS_UPDATED:\r\n            return { ...state, ...action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import { omit } from 'lodash/fp';\r\nimport { OffsetsState, OffsetsAction, OFFSETS_REFERENCE_PLAYER_ID_CHANGED, PLAYER_OFFSET_CHANGED, PLAYER_OFFSET_REMOVED } from './types';\r\n\r\nexport const offsetsInitialState: OffsetsState = {\r\n    referencePlayerId: null,\r\n    offsets: {},\r\n};\r\n\r\nexport const offsetsReducer = (state = offsetsInitialState, action: OffsetsAction) => {\r\n    switch (action.type) {\r\n        case OFFSETS_REFERENCE_PLAYER_ID_CHANGED:\r\n            return { ...state, referencePlayerId: action.payload.referenceId };\r\n\r\n        case PLAYER_OFFSET_CHANGED:\r\n            const { id, offset } = action.payload;\r\n            return {\r\n                ...state,\r\n                offsets: {\r\n                    ...state.offsets,\r\n                    [id]: offset,\r\n                },\r\n            };\r\n\r\n        case PLAYER_OFFSET_REMOVED:\r\n            return {\r\n                ...state,\r\n                offsets: omit(action.payload.id, state.offsets),\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {\r\n    ControlsMode,\r\n    Layout,\r\n    SettingsState,\r\n    SettingsAction,\r\n    SETTINGS_FULLSCREEN_ENTERED,\r\n    SETTINGS_FULLSCREEN_EXITED,\r\n    SETTINGS_CONTROLS_MODE_CHANGED,\r\n    SETTINGS_LAYOUT_CHANGED,\r\n    SETTINGS_FOCUSED_PLAYER_ID_CHANGED,\r\n    SETTINGS_MAIN_PLAYER_IDS_CHANGED,\r\n    SETTINGS_SECONDARY_PLAYER_IDS_CHANGED,\r\n    SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED,\r\n} from './types';\r\n\r\nconst settingsInitialState: SettingsState = {\r\n    isFullscreen: false,\r\n    controlsMode: ControlsMode.Individual,\r\n    layout: Layout.Overlay,\r\n    focusedPlayerId: null,\r\n    mainPlayerIds: [],\r\n    secondaryPlayerIds: [],\r\n};\r\n\r\nexport const settingsReducer = (state = settingsInitialState, action: SettingsAction) => {\r\n    switch (action.type) {\r\n        case SETTINGS_FULLSCREEN_ENTERED:\r\n            return { ...state, isFullscreen: true };\r\n\r\n        case SETTINGS_FULLSCREEN_EXITED:\r\n            return { ...state, isFullscreen: false };\r\n\r\n        case SETTINGS_CONTROLS_MODE_CHANGED:\r\n        case SETTINGS_LAYOUT_CHANGED:\r\n        case SETTINGS_FOCUSED_PLAYER_ID_CHANGED:\r\n        case SETTINGS_MAIN_PLAYER_IDS_CHANGED:\r\n        case SETTINGS_SECONDARY_PLAYER_IDS_CHANGED:\r\n        case SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED:\r\n            return { ...state, ...action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { omit } from 'lodash/fp';\r\nimport { VideosState, VideosAction, VIDEOS_ADDED, VIDEO_DELETED } from './types';\r\n\r\nconst videosInitialState: VideosState = {};\r\n\r\nexport const videosReducer = (state = videosInitialState, action: VideosAction) => {\r\n    switch (action.type) {\r\n        case VIDEOS_ADDED:\r\n            return { ...state, ...action.payload };\r\n\r\n        case VIDEO_DELETED:\r\n            return omit(action.payload.id, state);\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { masterPlayerInfoReducer } from './masterPlayerInfo/reducer';\r\nimport { offsetsReducer } from './offsets/reducer';\r\nimport { playersInfoReducer } from './playersInfo/reducer';\r\nimport { settingsReducer } from './settings/reducer';\r\nimport { videosReducer } from './videos/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    masterPlayerInfo: masterPlayerInfoReducer,\r\n    offsets: offsetsReducer,\r\n    playersInfo: playersInfoReducer,\r\n    settings: settingsReducer,\r\n    videos: videosReducer,\r\n});\r\n","import thunk from 'redux-thunk';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { masterPlayerMiddleware, offsetsMiddleware, playerGroupsMiddleware } from './middlewares';\r\nimport { rootReducer } from './state';\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(\r\n        thunk,\r\n        offsetsMiddleware,\r\n        masterPlayerMiddleware,\r\n        playerGroupsMiddleware,\r\n    )),\r\n);\r\n","import { Middleware } from 'redux';\r\nimport {\r\n    Action,\r\n    AppThunkDispatch,\r\n    State,\r\n    PLAYER_PLAYED_TIME_UPDATED,\r\n    PLAYER_PROGRESS_UPDATED,\r\n    VIDEO_DELETED,\r\n} from '../types';\r\nimport {\r\n    getOffsets,\r\n    areAllCorrectPlayersPlaying,\r\n    getPlayersInfoState,\r\n    shouldPlayerCurrentlyPlay,\r\n    getOffsetsReferencePlayerId,\r\n    getMasterPendingSeek,\r\n    getMasterPlayerPlayedSeconds,\r\n} from '../selectors';\r\nimport {\r\n    changeOffsetsReferencePlayerId,\r\n    changePlayerOffset,\r\n    normalizeOffsets,\r\n    playerStartPlaying,\r\n    removePlayerOffset,\r\n} from '../actions';\r\n\r\nexport const offsetsMiddleware: Middleware<{}, State, AppThunkDispatch> = store => next => (action: Action) => {\r\n    const { dispatch, getState } = store;\r\n\r\n    const prevState = getState();\r\n    next(action);\r\n    const state = getState();\r\n\r\n    const referencePlayerId = getOffsetsReferencePlayerId(state);\r\n\r\n    switch (action.type) {\r\n        case VIDEO_DELETED:\r\n            const { id: removedId } = action.payload;\r\n\r\n            dispatch(removePlayerOffset(removedId));\r\n\r\n            if (Object.keys(getOffsets(prevState)).length === 1) {\r\n                dispatch(changeOffsetsReferencePlayerId(null));\r\n            } else {\r\n                dispatch(normalizeOffsets());\r\n            }\r\n\r\n            break;\r\n\r\n        case PLAYER_PLAYED_TIME_UPDATED:\r\n        case PLAYER_PROGRESS_UPDATED:\r\n            const { id } = action.payload;\r\n\r\n            if (referencePlayerId === null) {\r\n                dispatch(changeOffsetsReferencePlayerId(id));\r\n                dispatch(changePlayerOffset(id, { offset: 0 }));\r\n                break;\r\n            }\r\n\r\n            if (areAllCorrectPlayersPlaying(state) || getMasterPendingSeek(prevState) !== null) {\r\n                break;\r\n            }\r\n\r\n            if (areAllCorrectPlayersPlaying(prevState) && !areAllCorrectPlayersPlaying(state)) {\r\n                Object.keys(getPlayersInfoState(state)).forEach(playerId => {\r\n                    if (shouldPlayerCurrentlyPlay(playerId)(state)) {\r\n                        dispatch(playerStartPlaying(playerId));\r\n                    }\r\n                });\r\n            }\r\n\r\n            Object.entries(getPlayersInfoState(state)).forEach(([playerId, playerInfo]) => {\r\n                if (shouldPlayerCurrentlyPlay(playerId)(prevState)) {\r\n                    dispatch(changePlayerOffset(playerId, {\r\n                        offset: playerInfo.playedSeconds - getMasterPlayerPlayedSeconds(state),\r\n                    }));\r\n                }\r\n            });\r\n\r\n            dispatch(normalizeOffsets());\r\n            break;\r\n    }\r\n};\r\n","import { Middleware } from 'redux';\r\nimport {\r\n    Action,\r\n    AppThunkDispatch,\r\n    State,\r\n    Layout,\r\n    VIDEOS_ADDED,\r\n    VIDEO_DELETED,\r\n    SETTINGS_LAYOUT_CHANGED,\r\n} from '../types';\r\nimport {\r\n    movePlayerToMainPlayers,\r\n    movePlayerToSecondaryPlayers,\r\n    setMainAndSecondaryPlayerIds,\r\n} from '../actions';\r\nimport {\r\n    getMainPlayerIds,\r\n    getSecondaryPlayerIds,\r\n} from '../selectors';\r\n\r\nexport const playerGroupsMiddleware: Middleware<{}, State, AppThunkDispatch> = store => next => (action: Action) => {\r\n    const { dispatch, getState } = store;\r\n\r\n    const state = getState();\r\n    const mainPlayerIds = getMainPlayerIds(state);\r\n    const secondaryPlayerIds = getSecondaryPlayerIds(state);\r\n\r\n    switch (action.type) {\r\n        case VIDEOS_ADDED:\r\n            Object.keys(action.payload).forEach((id, i) => {\r\n                if (i === 0 && mainPlayerIds.length === 0) {\r\n                    dispatch(movePlayerToMainPlayers(id));\r\n                } else {\r\n                    dispatch(movePlayerToSecondaryPlayers(id));\r\n                }\r\n            });\r\n            break;\r\n\r\n        case VIDEO_DELETED:\r\n            if (mainPlayerIds.length === 1 && mainPlayerIds[0] === action.payload.id && secondaryPlayerIds.length > 0) {\r\n                const newMainPlayerId = secondaryPlayerIds[0];\r\n                dispatch(setMainAndSecondaryPlayerIds({\r\n                    mainPlayerIds: [newMainPlayerId],\r\n                    secondaryPlayerIds: secondaryPlayerIds.filter(id => id !== newMainPlayerId),\r\n                }));\r\n                break;\r\n            }\r\n\r\n            dispatch(setMainAndSecondaryPlayerIds({\r\n                mainPlayerIds: mainPlayerIds.filter(id => id !== action.payload.id),\r\n                secondaryPlayerIds: secondaryPlayerIds.filter(id => id !== action.payload.id),\r\n            }));\r\n            break;\r\n\r\n        case SETTINGS_LAYOUT_CHANGED:\r\n            if (action.payload.layout === Layout.Overlay) {\r\n                if (mainPlayerIds.length > 1) {\r\n                    dispatch(setMainAndSecondaryPlayerIds({\r\n                        mainPlayerIds: [mainPlayerIds[0]],\r\n                        secondaryPlayerIds: [...mainPlayerIds.slice(1), ...secondaryPlayerIds],\r\n                    }));\r\n                }\r\n\r\n                if (mainPlayerIds.length === 0) {\r\n                    dispatch(setMainAndSecondaryPlayerIds({\r\n                        mainPlayerIds: [secondaryPlayerIds[0]],\r\n                        secondaryPlayerIds: [...secondaryPlayerIds.slice(1)],\r\n                    }));\r\n                }\r\n            }\r\n\r\n            break;\r\n    }\r\n\r\n    next(action);\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import styled from 'styled-components';\r\n\r\nexport const UrlTextFieldContainer = styled.div`\r\n    padding-top: 8px;\r\n`;\r\n\r\nexport const OrDividerContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n`;\r\n\r\nexport const OrDividerLine = styled.div<{ color: string }>`\r\n    flex: 1;\r\n    height: 1px;\r\n    box-shadow: inset 0 0 0 1px ${props => props.color};\r\n`;\r\n\r\nexport const OrDividerTextContainer = styled.div`\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n    color: rgba(255, 255, 255, 0.4);\r\n`;\r\n\r\ninterface AddFilesContainerProps {\r\n    activeColor: string;\r\n    isDragActive?: boolean;\r\n}\r\n\r\nexport const AddFilesContainer = styled.div<AddFilesContainerProps>`\r\n    width: 100%;\r\n    height: 72px;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    border-radius: 8px;\r\n    border: 1px dashed rgba(255, 255, 255, 0.7);\r\n    color: white;\r\n\r\n    ${props => props.isDragActive && `\r\n        border-color: ${props.activeColor};\r\n        color: ${props.activeColor};\r\n    `}\r\n\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const FilesListContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 8px;\r\n`;\r\n\r\nexport const FileItemContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { omit } from 'lodash/fp';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { useTheme, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Typography, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Video } from '../../redux/types';\r\nimport { addVideos } from '../../redux/actions';\r\nimport { AddFilesContainer, FileItemContainer, FilesListContainer, OrDividerContainer, OrDividerLine, OrDividerTextContainer, UrlTextFieldContainer } from './style';\r\n\r\ninterface OwnProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\ninterface DispatchProps {\r\n    addVideos: typeof addVideos;\r\n}\r\n\r\nexport type AddVideosDialogProps = OwnProps & DispatchProps;\r\n\r\nconst AddVideosDialog: React.FC<AddVideosDialogProps> = ({ open, onClose, addVideos }) => {\r\n    const theme = useTheme();\r\n\r\n    const [urls, setUrls] = useState<Record<string, Video>>({ [uuidv4()]: { url: '' } });\r\n    const [files, setFiles] = useState<Record<string, Video>>({});\r\n    const [fileNames, setFileNames] = useState<Record<string, string>>({});\r\n\r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n    } = useDropzone({\r\n        accept: 'video/*',\r\n        onDropAccepted: (acceptedFiles: File[]) => {\r\n            const parsedFiles = acceptedFiles.map(file => {\r\n                const id = uuidv4();\r\n                const { name } = file;\r\n                const url = URL.createObjectURL(file);\r\n\r\n                return { id, name, url };\r\n            });\r\n\r\n            const acceptedVideos = Object.fromEntries(parsedFiles.map(({ id, url }) => [id, { url }]));\r\n            const acceptedNames = Object.fromEntries(parsedFiles.map(({ id, name }) => [id, name ]));\r\n\r\n            setFiles({ ...files, ...acceptedVideos });\r\n            setFileNames({ ...fileNames, ...acceptedNames });\r\n        },\r\n    });\r\n\r\n    const handleConfirm = useCallback(() => {\r\n        const filterEmpty = (videos: Record<string, Video>) => Object.fromEntries(Object.entries(videos).filter(([_, value]) => value.url !== ''));\r\n\r\n        addVideos({\r\n            ...filterEmpty(urls),\r\n            ...filterEmpty(files),\r\n        });\r\n\r\n        onClose();\r\n\r\n        setUrls({ [uuidv4()]: { url: '' } });\r\n        setFiles({});\r\n        setFileNames({});\r\n    }, [addVideos, onClose, urls, files]);\r\n\r\n    const handleKeyPress = useCallback((e: KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            handleConfirm();\r\n        }\r\n    }, [handleConfirm]);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            window.addEventListener('keypress', handleKeyPress);\r\n        } else {\r\n            window.removeEventListener('keypress', handleKeyPress);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('keypress', handleKeyPress);\r\n        };\r\n    }, [open, handleKeyPress]);\r\n\r\n    const handleUrlInputChange = (id: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        // Adds a new TextField if all others are non-empty.\r\n        if (e.target.value !== '' && Object.keys(urls).every(i => i === id || urls[i].url !== '')) {\r\n            urls[uuidv4()] = { url: '' };\r\n        }\r\n\r\n        setUrls({ ...urls, [id]: { url: e.target.value } });\r\n    };\r\n\r\n    const handleUrlInputBlur = (id: string) => () => {\r\n        if (urls[id].url === '' && Object.keys(urls).some(i => i !== id && urls[i].url === '')) {\r\n            setUrls(omit(id, urls));\r\n        }\r\n    };\r\n\r\n    const handleFileDelete = (id: string) => () => {\r\n        setFiles(omit(id, files));\r\n        setFileNames(omit(id, fileNames));\r\n    };\r\n\r\n    const isConfirmActive = Object.keys(files).length > 0 || Object.keys(urls).some(id => urls[id].url !== '');\r\n\r\n    const addFilesContainerProps = {\r\n        ...getRootProps({ isDragActive }),\r\n        activeColor: theme.palette.primary.main,\r\n    };\r\n\r\n    return (\r\n        <Dialog fullWidth open={open} onClose={onClose}>\r\n            <DialogTitle>Add new videos</DialogTitle>\r\n            <DialogContent>\r\n                <Typography variant=\"body1\">\r\n                    Paste links to the videos here\r\n                </Typography>\r\n                {Object.keys(urls).map((id, index) => {\r\n                    const urlTextFieldProps = {\r\n                        value: urls[id].url,\r\n                        onChange: handleUrlInputChange(id),\r\n                        onBlur: handleUrlInputBlur(id),\r\n                        placeholder: `Video ${index + 1}`,\r\n                        fullWidth: true,\r\n                    };\r\n\r\n                    return (\r\n                        <UrlTextFieldContainer key={id}>\r\n                            <TextField {...urlTextFieldProps} />\r\n                        </UrlTextFieldContainer>\r\n                    );\r\n                })}\r\n\r\n                <OrDividerContainer>\r\n                    <OrDividerLine color={theme.palette.divider} />\r\n                    <OrDividerTextContainer>\r\n                        <Typography variant=\"h6\">OR</Typography>\r\n                    </OrDividerTextContainer>\r\n                    <OrDividerLine color={theme.palette.divider} />\r\n                </OrDividerContainer>\r\n\r\n                <AddFilesContainer {...addFilesContainerProps}>\r\n                    <input {...getInputProps()} />\r\n                    <Typography variant=\"body1\">Add files</Typography>\r\n                </AddFilesContainer>\r\n                <FilesListContainer>\r\n                    {Object.keys(files).map(id => (\r\n                        <FileItemContainer key={id}>\r\n                            <IconButton size=\"small\" onClick={handleFileDelete(id)}>\r\n                                <Delete fontSize=\"small\" />\r\n                            </IconButton>\r\n                            <div style={{ width: '4px' }} />\r\n                            <Typography variant=\"body1\">{fileNames[id]}</Typography>\r\n                        </FileItemContainer>\r\n                    ))}\r\n                </FilesListContainer>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" onClick={handleConfirm} disabled={!isConfirmActive}>\r\n                    Confirm\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    {\r\n        addVideos,\r\n    },\r\n)(AddVideosDialog);\r\n","import { AppThunkAction } from '../types';\r\nimport { deletePlayer } from '../playersInfo/actions';\r\nimport { Video, VideosAddedAction, VideoRemovedAction, VIDEOS_ADDED, VIDEO_DELETED} from './types';\r\n\r\nexport const addVideos = (videos: Record<string, Video>): VideosAddedAction => ({\r\n    type: VIDEOS_ADDED,\r\n    payload: videos,\r\n});\r\n\r\nexport const deleteVideo = (id: string): VideoRemovedAction => ({\r\n    type: VIDEO_DELETED,\r\n    payload: { id },\r\n});\r\n\r\nexport const removeVideo = (id: string): AppThunkAction => dispatch => {\r\n    dispatch(deleteVideo(id));\r\n    dispatch(deletePlayer(id));\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { AppBar as MaterialAppBar, Button, Slide, Toolbar, Typography } from '@material-ui/core';\r\nimport { State } from '../../redux/types';\r\nimport { getIsFullscreen } from '../../redux/selectors';\r\n\r\ninterface OwnProps {\r\n    onAddVideosClick?: () => void;\r\n}\r\n\r\ninterface StateProps {\r\n    isFullscreen: boolean;\r\n}\r\n\r\nexport type AppBarProps = OwnProps & StateProps;\r\n\r\nconst AppBar: React.FC<AppBarProps> = ({ onAddVideosClick, isFullscreen }) => {\r\n    const handleAddVideosClick = () => {\r\n        if (onAddVideosClick) {\r\n            onAddVideosClick();\r\n        }\r\n    };\r\n\r\n    if (isFullscreen) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Slide in={!isFullscreen}>\r\n            <MaterialAppBar position=\"static\" color=\"inherit\">\r\n                <Toolbar variant=\"dense\">\r\n                    <img src={`${process.env.PUBLIC_URL}/logo192-clean.png`} alt=\"Multiview\" width=\"30px\" height=\"30px\" />\r\n                    <div style={{ width: '12px' }} />\r\n                    <Typography variant=\"h6\">\r\n                        Multiview\r\n                    </Typography>\r\n                    <div style={{ flex: 1 }} />\r\n                    <Button variant=\"outlined\" color=\"default\" onClick={handleAddVideosClick}>Add videos</Button>\r\n                </Toolbar>\r\n            </MaterialAppBar>\r\n        </Slide>\r\n    );\r\n};\r\n\r\nexport default connect<StateProps, {}, OwnProps, State>(\r\n    createStructuredSelector({\r\n        isFullscreen: getIsFullscreen,\r\n    })\r\n)(AppBar);\r\n","import { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { State } from '../../redux/types';\r\nimport {\r\n    getFocusedPlayerDurationSeconds,\r\n    getFocusedPlayerId,\r\n    getFocusedPlayerPlayedSeconds,\r\n    getIsFocusedPlayerPlaying,\r\n    getFocusedPlayerVolume,\r\n    getIsFocusedPlayerMuted,\r\n} from '../../redux/selectors';\r\nimport {\r\n    playerStartPlaying,\r\n    startPlayback,\r\n    playerStopPlaying,\r\n    stopPlayback,\r\n    playerPushPendingSeek,\r\n    seekTo,\r\n    playerUpdateVolume,\r\n    masterPlayerUpdateVolume,\r\n    playerMute,\r\n    masterPlayerMute,\r\n    playerUnmute,\r\n    masterPlayerUnmute,\r\n} from '../../redux/actions';\r\n\r\nconst ARROW_SEEK_AMOUNT = 5;\r\nconst ARROW_VOLUME_AMOUNT = 0.1;\r\n\r\ninterface OwnProps {\r\n    isActive: boolean;\r\n}\r\n\r\ninterface StateProps {\r\n    isPlaying: boolean;\r\n    focusedPlayerId: string | null;\r\n    playedSeconds: number;\r\n    durationSeconds: number;\r\n    volume: number;\r\n    isMuted: boolean;\r\n}\r\n\r\ninterface DispatchProps {\r\n    playerStartPlaying: (id: string) => void;\r\n    masterPlayerStartPlaying: () => void;\r\n    playerStopPlaying: (id: string) => void;\r\n    masterPlayerStopPlaying: () => void;\r\n    playerSeekTo: (id: string, { seekToSeconds }: { seekToSeconds: number }) => void;\r\n    masterPlayerSeekTo: (seekToSeconds: number) => void;\r\n    playerUpdateVolume: (id: string, { volume }: { volume: number }) => void;\r\n    masterPlayerUpdateVolume: (volume: number) => void;\r\n    playerMute: (id: string) => void;\r\n    masterPlayerMute: () => void;\r\n    playerUnmute: (id: string) => void;\r\n    masterPlayerUnmute: () => void;\r\n}\r\n\r\nexport type KeyboardEventHandlerProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst KeyboardEventHandler: React.FC<KeyboardEventHandlerProps> = ({\r\n    isActive,\r\n    isPlaying,\r\n    focusedPlayerId,\r\n    playedSeconds,\r\n    durationSeconds,\r\n    volume,\r\n    isMuted,\r\n    playerStartPlaying,\r\n    masterPlayerStartPlaying,\r\n    playerStopPlaying,\r\n    masterPlayerStopPlaying,\r\n    playerSeekTo,\r\n    masterPlayerSeekTo,\r\n    playerUpdateVolume,\r\n    masterPlayerUpdateVolume,\r\n    playerMute,\r\n    masterPlayerMute,\r\n    playerUnmute,\r\n    masterPlayerUnmute,\r\n}) => {\r\n    const handleKeyPress = useCallback((e: KeyboardEvent) => {\r\n        if (!isActive) {\r\n            return;\r\n        }\r\n\r\n        let shouldPreventDefault = true;\r\n        switch (e.code) {\r\n            case 'Space':\r\n                if (isPlaying) {\r\n                    if (focusedPlayerId) {\r\n                        playerStopPlaying(focusedPlayerId);\r\n                    } else {\r\n                        masterPlayerStopPlaying();\r\n                    }\r\n                } else {\r\n                    if (focusedPlayerId) {\r\n                        playerStartPlaying(focusedPlayerId);\r\n                    } else {\r\n                        masterPlayerStartPlaying();\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'ArrowLeft':\r\n            case 'ArrowRight':\r\n                const seekToSeconds = Math.max(0, Math.min(durationSeconds, playedSeconds + (e.code === 'ArrowLeft' ? -1 : 1) * ARROW_SEEK_AMOUNT));\r\n\r\n                if (focusedPlayerId) {\r\n                    playerSeekTo(focusedPlayerId, { seekToSeconds });\r\n                } else {\r\n                    masterPlayerSeekTo(seekToSeconds);\r\n                }\r\n\r\n                break;\r\n\r\n            case 'ArrowUp':\r\n            case 'ArrowDown':\r\n                const newVolume = Math.max(0, Math.min(1, volume + (e.code === 'ArrowDown' ? -1 : 1) * ARROW_VOLUME_AMOUNT));\r\n\r\n                if (focusedPlayerId) {\r\n                    playerUpdateVolume(focusedPlayerId, { volume: newVolume });\r\n                } else {\r\n                    masterPlayerUpdateVolume(newVolume);\r\n                }\r\n\r\n                break;\r\n\r\n            case 'KeyM':\r\n                if (isMuted) {\r\n                    if (focusedPlayerId) {\r\n                        playerUnmute(focusedPlayerId);\r\n                    } else {\r\n                        masterPlayerUnmute();\r\n                    }\r\n                } else {\r\n                    if (focusedPlayerId) {\r\n                        playerMute(focusedPlayerId);\r\n                    } else {\r\n                        masterPlayerMute();\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                shouldPreventDefault = false;\r\n                break;\r\n        }\r\n\r\n        if (shouldPreventDefault) {\r\n            e.preventDefault();\r\n        }\r\n    }, [\r\n        isActive,\r\n        isPlaying,\r\n        focusedPlayerId,\r\n        durationSeconds,\r\n        playedSeconds,\r\n        volume,\r\n        isMuted,\r\n        playerStartPlaying,\r\n        masterPlayerStartPlaying,\r\n        playerStopPlaying,\r\n        masterPlayerStopPlaying,\r\n        playerSeekTo,\r\n        masterPlayerSeekTo,\r\n        playerUpdateVolume,\r\n        masterPlayerUpdateVolume,\r\n        playerMute,\r\n        masterPlayerMute,\r\n        playerUnmute,\r\n        masterPlayerUnmute,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyPress);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyPress);\r\n        }\r\n    }, [handleKeyPress]);\r\n\r\n\r\n    return null;\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, {}, State>(\r\n    createStructuredSelector({\r\n        focusedPlayerId: getFocusedPlayerId,\r\n        isPlaying: getIsFocusedPlayerPlaying,\r\n        durationSeconds: getFocusedPlayerDurationSeconds,\r\n        playedSeconds: getFocusedPlayerPlayedSeconds,\r\n        volume: getFocusedPlayerVolume,\r\n        isMuted: getIsFocusedPlayerMuted,\r\n    }),\r\n    {\r\n        playerStartPlaying,\r\n        masterPlayerStartPlaying: startPlayback,\r\n        playerStopPlaying,\r\n        masterPlayerStopPlaying: stopPlayback,\r\n        playerSeekTo: playerPushPendingSeek,\r\n        masterPlayerSeekTo: seekTo,\r\n        playerUpdateVolume,\r\n        masterPlayerUpdateVolume,\r\n        playerMute,\r\n        masterPlayerMute,\r\n        playerUnmute,\r\n        masterPlayerUnmute,\r\n    },\r\n)(KeyboardEventHandler);\r\n","export const formatSeconds = (totalSeconds: number) => {\r\n    const roundedSeconds = Math.round(totalSeconds);\r\n\r\n    const hours = Math.floor(roundedSeconds / (60 * 60));\r\n    const minutes = Math.floor((roundedSeconds % (60 * 60)) / 60);\r\n    const seconds = roundedSeconds % 60;\r\n\r\n    const paddedHours = hours > 0 ? `${hours}:` : '';\r\n    const paddedMinutes = (hours > 0 && minutes < 10) ? `0${minutes}` : `${minutes}:`;\r\n    const paddedSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return `${paddedHours}${paddedMinutes}${paddedSeconds}`;\r\n};\r\n","export interface GetOptimalGridPlayerSizeProps {\r\n    containerWidth: number;\r\n    containerHeight: number;\r\n    numberOfPlayers: number;\r\n}\r\n\r\nexport const getOptimalGridPlayerSize = ({ containerWidth, containerHeight, numberOfPlayers }: GetOptimalGridPlayerSizeProps) => {\r\n    let left = 0;\r\n    let right = containerWidth;\r\n\r\n    let iters = 0;\r\n    while (Math.abs(left - right) >= 1e-5 && iters <= 1000) {\r\n        let middle = Math.ceil((right + left) / 2);\r\n\r\n        const playerWidth = middle;\r\n        const playerHeight = Math.ceil(playerWidth / 16 * 9);\r\n\r\n        if (canFitPlayersOfSize({ containerWidth, containerHeight, playerWidth, playerHeight, numberOfPlayers })) {\r\n            left = middle;\r\n        } else {\r\n            right = middle - 1;\r\n        }\r\n\r\n        iters += 1;\r\n    }\r\n\r\n    const playerWidth = left;\r\n    const playerHeight = Math.ceil(playerWidth / 16 * 9);\r\n\r\n    return { playerWidth, playerHeight };\r\n};\r\n\r\ninterface CanFitPlayersOfSizeProps {\r\n    containerWidth: number;\r\n    containerHeight: number;\r\n    playerWidth: number;\r\n    playerHeight: number;\r\n    numberOfPlayers: number;\r\n}\r\n\r\nconst canFitPlayersOfSize = ({ containerWidth, containerHeight, playerWidth, playerHeight, numberOfPlayers }: CanFitPlayersOfSizeProps) => {\r\n    const playersInRow = Math.floor(containerWidth / playerWidth);\r\n    const playersInColumn = Math.ceil(numberOfPlayers / playersInRow);\r\n\r\n    return (playersInColumn * playerHeight) <= containerHeight;\r\n};\r\n","export interface GetPlayerGridPositionsProps {\r\n    playerWidth: number;\r\n    playerHeight: number;\r\n    containerWidth: number;\r\n    containerHeight: number;\r\n    numberOfPlayers: number;\r\n    alignToRight?: boolean;\r\n}\r\n\r\nexport const getPlayerGridPositions = ({ playerWidth, playerHeight, containerWidth, containerHeight, numberOfPlayers, alignToRight }: GetPlayerGridPositionsProps) => {\r\n    const cols = Math.floor(containerWidth / playerWidth);\r\n    const rows = Math.ceil(numberOfPlayers / cols);\r\n\r\n    return Array.from({ length: numberOfPlayers }).map((_, i) => {\r\n        const row = Math.floor(i / cols);\r\n        const col = i % cols;\r\n\r\n        const playersInCol = (row === rows - 1) ? (cols - (cols * rows - numberOfPlayers)) : cols;\r\n\r\n        const topOffset = (containerHeight - rows * playerHeight) / 2;\r\n        let leftOffset = (containerWidth - playersInCol * playerWidth) / 2;\r\n\r\n        if (alignToRight) {\r\n            leftOffset *= 2;\r\n        }\r\n\r\n        const top = row * playerHeight + topOffset;\r\n        const left = col * playerWidth + leftOffset;\r\n\r\n        return {\r\n            top,\r\n            left,\r\n            width: playerWidth,\r\n            height: playerHeight,\r\n        };\r\n    });\r\n};","import styled from 'styled-components';\r\n\r\nexport const PlaybackSliderInteractionContainer = styled.div`\r\n    height: 19px;\r\n    margin-left: 8px;\r\n    margin-right: 8px;\r\n\r\n    position: relative;\r\n    top: -8px;\r\n    left: 0;\r\n    right: 0;\r\n\r\n    z-index: 1000;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const PlaybackSliderContainer = styled.div<{ wide: boolean }>`\r\n    height: 3px;\r\n\r\n    position: relative;\r\n    top: 8px;\r\n    left: 0;\r\n    right: 0;\r\n\r\n    transition: 100ms;\r\n\r\n    ${props => props.wide ? `\r\n        height: 4px;\r\n        top: 7.5px;\r\n    ` : null}\r\n`;\r\n\r\nexport const PlaybackSliderBar = styled.div.attrs<{ progress: number; color: string }>(props => ({\r\n    style: { right: `calc(100% - 100% * ${props.progress})` },\r\n}))<{ progress: number; color: string }>`\r\n    width: auto;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n\r\n    background-color: ${props => props.color};\r\n`;\r\n\r\nexport const PlaybackSliderScrubber = styled.div.attrs<{ progress: number; color: string; visible: boolean }>(props => ({\r\n    style: { right: `calc(100% - 100% * ${props.progress} - 6px)` },\r\n}))<{ progress: number; color: string; visible: boolean }>`\r\n    width: 12px;\r\n    height: 12px;\r\n    border-radius: 50%;\r\n    background-color: ${props => props.color};\r\n\r\n    position: absolute;\r\n    top: -4px;\r\n\r\n    transform: scale(${props => props.visible ? 1 : 0});\r\n    transition: transform 100ms;\r\n`;\r\n\r\nexport const PlaybackSliderTimePreviewContainer = styled.div.attrs<{ progress: number; visible: boolean }>(props => ({\r\n    style: { left: `max(0px, min(calc(100% - 64px), calc(100% * ${props.progress} - 32px)))` },\r\n}))<{ progress: number; visible: boolean }>`\r\n    width: 64px;\r\n    height: 32px;\r\n\r\n    position: absolute;\r\n    top: -32px;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    opacity: ${props => props.visible ? 1 : 0};\r\n    transition: opacity 100ms;\r\n\r\n    pointer-events: none;\r\n`;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Typography, useTheme } from '@material-ui/core';\r\nimport { throttle } from 'lodash/fp';\r\nimport { formatSeconds } from '../../utils';\r\nimport { PlaybackSliderBar, PlaybackSliderContainer, PlaybackSliderInteractionContainer, PlaybackSliderScrubber, PlaybackSliderTimePreviewContainer } from './style'\r\n\r\nexport interface PlaybackSliderProps {\r\n    playedFraction: number;\r\n    loadedFraction: number;\r\n    durationSeconds: number;\r\n    isBuffering: boolean;\r\n    onSeek?: (playedFraction: number) => void;\r\n}\r\n\r\nconst throttledHandleSeek = throttle(1000, (playedFraction: number, onSeek?: (playedFraction: number) => void) => {\r\n    if (onSeek) {\r\n        onSeek(playedFraction);\r\n    }\r\n});\r\n\r\nconst PlaybackSlider: React.FC<PlaybackSliderProps> = ({ playedFraction, loadedFraction, durationSeconds, isBuffering, onSeek }) => {\r\n    const theme = useTheme();\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [isScrubberGrabbed, setIsScrubberGrabbed] = useState(false);\r\n    const [internalPlayedFraction, setInternalPlayedFraction] = useState(playedFraction);\r\n    const [mousePosFraction, setMousePosFraction] = useState(0);\r\n\r\n    const sliderContainerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (!isScrubberGrabbed && !isBuffering) {\r\n            setInternalPlayedFraction(playedFraction);\r\n        }\r\n    }, [playedFraction, isScrubberGrabbed, isBuffering]);\r\n\r\n    const handleMouseEnter = () => setIsHovered(true);\r\n    const handleMouseLeave = () => setIsHovered(false);\r\n\r\n    const getMousePosFraction = (mouseX: number) => {\r\n        const { current: sliderContainer } = sliderContainerRef;\r\n        if (sliderContainer) {\r\n            const { width: sliderContainerWidth, x: sliderContainerX } = sliderContainer.getBoundingClientRect();\r\n\r\n            const relativeMouseX = mouseX - sliderContainerX;\r\n            const clampedMouseX = Math.max(0, Math.min(sliderContainerWidth, relativeMouseX));\r\n\r\n            return clampedMouseX / sliderContainerWidth;\r\n        }\r\n\r\n        return 0;\r\n    };\r\n\r\n    const handleNewPlayedFractionSelected = (mouseX: number) => {\r\n        const newMousePosFraction = getMousePosFraction(mouseX);\r\n        setMousePosFraction(newMousePosFraction);\r\n        setInternalPlayedFraction(newMousePosFraction);\r\n        throttledHandleSeek(newMousePosFraction, onSeek);\r\n    };\r\n\r\n    const handleWindowMouseMove = (event: MouseEvent) => {\r\n        handleNewPlayedFractionSelected(event.clientX);\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handleMouseMove = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        const newMousePosFraction = getMousePosFraction(event.clientX);\r\n        setMousePosFraction(newMousePosFraction);\r\n    };\r\n\r\n    const handleMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        setIsScrubberGrabbed(true);\r\n        handleNewPlayedFractionSelected(event.clientX);\r\n\r\n        window.addEventListener('mousemove', handleWindowMouseMove);\r\n        window.addEventListener('mouseup', handleMouseUp);\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n        setIsScrubberGrabbed(false);\r\n\r\n        window.removeEventListener('mousemove', handleWindowMouseMove);\r\n        window.removeEventListener('mouseup', handleMouseUp);\r\n    };\r\n\r\n    const isInteractable = isHovered || isScrubberGrabbed;\r\n\r\n    const interactionContainerProps = {\r\n        onMouseEnter: handleMouseEnter,\r\n        onMouseLeave: handleMouseLeave,\r\n        onMouseMove: handleMouseMove,\r\n        onMouseDown: handleMouseDown,\r\n        onMouseUp: handleMouseUp,\r\n    };\r\n\r\n    if (durationSeconds === null || durationSeconds === Infinity) {\r\n        return (\r\n            <PlaybackSliderInteractionContainer style={{ cursor: 'initial '}}>\r\n                <PlaybackSliderContainer wide={false}>\r\n                    <PlaybackSliderBar progress={1} color=\"rgba(255, 255, 255, 0.2)\" />\r\n                </PlaybackSliderContainer>\r\n            </PlaybackSliderInteractionContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <PlaybackSliderInteractionContainer {...interactionContainerProps}>\r\n            <PlaybackSliderContainer wide={isInteractable} ref={sliderContainerRef}>\r\n                <PlaybackSliderBar progress={1} color=\"rgba(255, 255, 255, 0.2)\" />\r\n                <PlaybackSliderBar progress={loadedFraction} color=\"rgba(255, 255, 255, 0.6)\" />\r\n                <PlaybackSliderBar progress={internalPlayedFraction} color={theme.palette.primary.light} />\r\n\r\n                <PlaybackSliderScrubber progress={internalPlayedFraction} color={theme.palette.primary.light} visible={isInteractable} />\r\n\r\n                <PlaybackSliderTimePreviewContainer progress={mousePosFraction} visible={isInteractable}>\r\n                    <Typography variant=\"caption\">\r\n                        {formatSeconds(Math.round(mousePosFraction * durationSeconds))}\r\n                    </Typography>\r\n                </PlaybackSliderTimePreviewContainer>\r\n            </PlaybackSliderContainer>\r\n        </PlaybackSliderInteractionContainer>\r\n    );\r\n};\r\n\r\nexport default PlaybackSlider;\r\n","import styled from 'styled-components';\r\n\r\nexport const VolumeControlContainer = styled.div<{ isSliderVisible: boolean }>`\r\n    width: ${props => props.isSliderVisible ? 114 : 30}px;\r\n    height: 30px;\r\n    overflow: hidden;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n    transition: width 100ms;\r\n`;\r\n\r\nexport const VolumeControlIconContainer = styled.div`\r\n    margin-right: 12px;\r\n    z-index: 1;\r\n`;\r\n\r\nexport const VolumeControlSliderContainer = styled.div`\r\n    width: 62px;\r\n    height: 28px;\r\n    z-index: 0;\r\n`;\r\n","import { useState, useEffect } from 'react';\r\nimport { throttle } from 'lodash/fp';\r\nimport { IconButton, Slider, withStyles } from '@material-ui/core';\r\nimport { VolumeOff, VolumeDown, VolumeUp } from '@material-ui/icons';\r\nimport { VolumeControlContainer, VolumeControlIconContainer, VolumeControlSliderContainer } from './style';\r\n\r\nconst VolumeSlider = withStyles({\r\n    root: {\r\n        color: 'white',\r\n        height: 4,\r\n    },\r\n    thumb: {\r\n        '&:focus, &:hover, &$active': {\r\n            boxShadow: 'inherit',\r\n        },\r\n    },\r\n    active: {},\r\n    track: {\r\n        height: 4,\r\n        marginTop: -1,\r\n    },\r\n    rail: {\r\n        height: 4,\r\n        marginTop: -1,\r\n    },\r\n})(Slider);\r\n\r\ninterface VolumeControlProps {\r\n    volume: number;\r\n    isMuted?: boolean;\r\n    onVolumeChange?: (volume: number) => void;\r\n    onMuteUnmute?: (isMuted: boolean) => void;\r\n}\r\n\r\nconst throttledOnVolumeChange = throttle(100, (volume: number, onVolumeChange?: (volume: number) => void) => {\r\n    if (onVolumeChange) {\r\n        onVolumeChange(volume);\r\n    }\r\n});\r\n\r\nconst VolumeControl: React.FC<VolumeControlProps> = ({ volume, isMuted, onVolumeChange, onMuteUnmute }) => {\r\n    const [isMouseOver, setIsMouseOver] = useState(false);\r\n    const [isAdjustingVolume, setIsAdjustingVolume] = useState(false);\r\n    const [internalVolume, setInternalVolume] = useState(volume);\r\n\r\n    useEffect(() => {\r\n        if (!isAdjustingVolume) {\r\n            setInternalVolume(volume);\r\n        }\r\n    }, [volume, isAdjustingVolume, setInternalVolume]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('mouseup', () => setIsAdjustingVolume(false));\r\n\r\n        return () => {\r\n            window.removeEventListener('mouseup', () => setIsAdjustingVolume(false));\r\n        };\r\n    }, [setIsAdjustingVolume]);\r\n\r\n    const handleVolumeChange = (_: React.ChangeEvent<{}>, v: number | number[]) => {\r\n        const parsedVolume = (Array.isArray(v) ? v[0] : v) || 0;\r\n\r\n        throttledOnVolumeChange(parsedVolume, onVolumeChange);\r\n        setInternalVolume(parsedVolume);\r\n    };\r\n\r\n    const handleIconClick = () => {\r\n        if (onMuteUnmute) {\r\n            onMuteUnmute(!isMuted);\r\n        }\r\n    };\r\n\r\n    const volumeControlContainerProps = {\r\n        isSliderVisible: isMouseOver || isAdjustingVolume,\r\n        onMouseEnter: () => setIsMouseOver(true),\r\n        onMouseLeave: () => setIsMouseOver(false),\r\n    };\r\n\r\n    const volumeControlSliderContainerProps = {\r\n        onMouseDown: () => setIsAdjustingVolume(true),\r\n        onMouseUp: () => setIsAdjustingVolume(false),\r\n    };\r\n\r\n    const volumeSliderProps = {\r\n        value: internalVolume,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        onChange: handleVolumeChange,\r\n    };\r\n\r\n    return (\r\n        <VolumeControlContainer {...volumeControlContainerProps}>\r\n            <VolumeControlIconContainer>\r\n                <IconButton size=\"small\" onClick={handleIconClick}>\r\n                    {getVolumeIcon(volume, isMuted)}\r\n                </IconButton>\r\n            </VolumeControlIconContainer>\r\n            <VolumeControlSliderContainer {...volumeControlSliderContainerProps}>\r\n                <VolumeSlider {...volumeSliderProps} />\r\n            </VolumeControlSliderContainer>\r\n        </VolumeControlContainer>\r\n    );\r\n};\r\n\r\nconst getVolumeIcon = (volume: number, isMuted?: boolean) => {\r\n    if (isMuted || volume === 0) {\r\n        return <VolumeOff />;\r\n    } else if (volume < 0.5) {\r\n        return <VolumeDown />;\r\n    } else {\r\n        return <VolumeUp />;\r\n    }\r\n};\r\n\r\nexport default VolumeControl;\r\n","import styled from 'styled-components';\r\n\r\nexport const PlaybackControlBarContainer = styled.div`\r\n    width: 100%;\r\n    height: 46px;\r\n`;\r\n\r\nexport const PlaybackControlBarOuterWrapper = styled.div`\r\n    width: 100%;\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`;\r\n\r\nexport const PlaybackControlBarInnerWrapper = styled.div`\r\n    height: 30px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex: 1;\r\n`;\r\n\r\nexport const PlaybackControlBarProgressTextWrapper = styled.div`\r\n    height: 100%;\r\n    padding-left: 12px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n    user-select: none;\r\n`;\r\n\r\nexport const PlaybackControlBarButtonsSpacer = styled.div`\r\n    flex: 1;\r\n`;\r\n\r\nexport const PlaybackControlBarActionsWrapper = styled.div`\r\n    height: 28px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: right;\r\n    align-items: center;\r\n`;\r\n","import { IconButton, Typography } from '@material-ui/core';\r\nimport { PlayArrow, Pause } from '@material-ui/icons';\r\nimport { formatSeconds } from '../../utils';\r\nimport { PlaybackSlider } from '../PlaybackSlider';\r\nimport { VolumeControl } from '../VolumeControl';\r\nimport {\r\n    PlaybackControlBarContainer,\r\n    PlaybackControlBarOuterWrapper,\r\n    PlaybackControlBarInnerWrapper,\r\n    PlaybackControlBarProgressTextWrapper,\r\n    PlaybackControlBarButtonsSpacer,\r\n    PlaybackControlBarActionsWrapper,\r\n} from './style';\r\n\r\ninterface PlaybackControlBarProps {\r\n    isPlaying: boolean;\r\n    isBuffering: boolean;\r\n    isMuted: boolean;\r\n    volume: number;\r\n    durationSeconds: number;\r\n    playedFraction: number;\r\n    loadedFraction: number;\r\n\r\n    onPlay: () => void;\r\n    onPause: () => void;\r\n    onMuteUnmute: (isMuted: boolean) => void;\r\n    onVolumeChange: (volume: number) => void;\r\n    onSeek: (seconds: number) => void;\r\n\r\n    actions: JSX.Element;\r\n}\r\n\r\nconst PlaybackControlBar: React.FC<PlaybackControlBarProps> = ({\r\n    isPlaying,\r\n    isBuffering,\r\n    isMuted,\r\n    volume,\r\n    durationSeconds,\r\n    playedFraction,\r\n    loadedFraction,\r\n    onPlay,\r\n    onPause,\r\n    onMuteUnmute,\r\n    onVolumeChange,\r\n    onSeek,\r\n    actions,\r\n}) => {\r\n    const handlePlayPauseClick = () => {\r\n        if (isPlaying) {\r\n            onPause();\r\n        } else {\r\n            onPlay();\r\n        }\r\n    };\r\n\r\n    const handleSeek = (seekFraction: number) => {\r\n        onSeek(seekFraction * durationSeconds);\r\n    };\r\n\r\n    const playbackSliderProps = {\r\n        playedFraction,\r\n        loadedFraction,\r\n        durationSeconds,\r\n        isBuffering,\r\n        onSeek: handleSeek,\r\n    };\r\n\r\n    const volumeControlProps = {\r\n        volume: isMuted ? 0 : volume,\r\n        onMuteUnmute,\r\n        onVolumeChange,\r\n    };\r\n\r\n    const isLive = (durationSeconds === null || durationSeconds === Infinity);\r\n\r\n    return (\r\n        <PlaybackControlBarContainer>\r\n            <PlaybackSlider {...playbackSliderProps} />\r\n            <PlaybackControlBarOuterWrapper>\r\n                <IconButton size=\"small\" onClick={handlePlayPauseClick}>\r\n                    {isPlaying ? <Pause fontSize=\"large\" /> : <PlayArrow fontSize=\"large\" />}\r\n                </IconButton>\r\n                <PlaybackControlBarInnerWrapper>\r\n                    <div style={{ width: '10px' }} />\r\n\r\n                    <VolumeControl {...volumeControlProps} />\r\n\r\n                    {!isLive ? (\r\n                        <PlaybackControlBarProgressTextWrapper>\r\n                            <Typography variant=\"body2\">{formatSeconds(Math.round(playedFraction * durationSeconds))}</Typography>\r\n                            <div style={{ width: '4px' }} />\r\n                            <Typography variant=\"body2\"> / </Typography>\r\n                            <div style={{ width: '4px' }} />\r\n                            <Typography variant=\"body2\">{formatSeconds(durationSeconds)}</Typography>\r\n                        </PlaybackControlBarProgressTextWrapper>\r\n                    ) : null}\r\n\r\n                    <PlaybackControlBarButtonsSpacer />\r\n\r\n                    <PlaybackControlBarActionsWrapper>\r\n                        {actions}\r\n                    </PlaybackControlBarActionsWrapper>\r\n                </PlaybackControlBarInnerWrapper>\r\n            </PlaybackControlBarOuterWrapper>\r\n        </PlaybackControlBarContainer>\r\n    );\r\n};\r\n\r\nexport default PlaybackControlBar;\r\n","import { useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, ListItemIcon, Menu, MenuItem, Tooltip, Typography } from '@material-ui/core';\r\nimport { VisibilityOff, ArrowBack, ArrowForward, ArrowUpward, ArrowDownward, CenterFocusWeak, Delete, Settings } from '@material-ui/icons';\r\nimport { State, Layout } from '../../redux/types';\r\nimport { movePlayerToSecondaryPlayers, movePlayerToMainPlayers, makePlayerMain, movePlayerLeft, movePlayerRight, removeVideo } from '../../redux/actions';\r\nimport { getLayout, getIsPlayerMain, canMovePlayerLeft, canMovePlayerRight } from '../../redux/selectors';\r\n\r\ninterface OwnProps {\r\n    id: string;\r\n    onHide?: () => void;\r\n    dense?: boolean;\r\n}\r\n\r\ninterface StateProps {\r\n    layout: Layout;\r\n    isMainPlayer: boolean;\r\n    canMoveLeft: boolean;\r\n    canMoveRight: boolean;\r\n}\r\n\r\ninterface DispatchProps {\r\n    movePlayerToMainPlayers: (id: string) => void;\r\n    movePlayerToSecondaryPlayers: (id: string) => void;\r\n    makePlayerMain: (id: string) => void;\r\n    movePlayerLeft: (id: string) => void;\r\n    movePlayerRight: (id: string) => void;\r\n    removeVideo: (id: string) => void;\r\n}\r\n\r\nexport type IndividualPlaybackControlBarActionsProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst IndividualPlaybackControlBarActions: React.FC<IndividualPlaybackControlBarActionsProps> = ({\r\n    id,\r\n    onHide,\r\n    dense,\r\n    layout,\r\n    isMainPlayer,\r\n    canMoveLeft,\r\n    canMoveRight,\r\n    movePlayerToMainPlayers,\r\n    movePlayerToSecondaryPlayers,\r\n    makePlayerMain,\r\n    movePlayerLeft,\r\n    movePlayerRight,\r\n    removeVideo,\r\n}) => {\r\n    const settingsButtonRef = useRef<HTMLButtonElement | null>(null);\r\n\r\n    const [isSettingsMenuOpen, setIsSettingsMenuOpen] = useState(false);\r\n    const [isDeleteConfirmationDialogShown, setIsDeleteConfirmationDialogShown] = useState(false);\r\n\r\n    const handleFocusButtonClick = () => {\r\n        makePlayerMain(id);\r\n    };\r\n\r\n    const handleMoveButtonClick = () => {\r\n        if (isMainPlayer) {\r\n            movePlayerToSecondaryPlayers(id);\r\n        } else {\r\n            movePlayerToMainPlayers(id);\r\n        }\r\n    };\r\n\r\n    const handleHideButtonClick = () => {\r\n        if (onHide) {\r\n            onHide();\r\n        }\r\n    };\r\n\r\n    const handleDeleteButtonClick = () => {\r\n        setIsDeleteConfirmationDialogShown(true);\r\n    };\r\n\r\n    const handleSettingsButtonClick = () => {\r\n        setIsSettingsMenuOpen(true);\r\n    };\r\n\r\n    const handleSettingsMenuHide = () => {\r\n        setIsSettingsMenuOpen(false);\r\n    };\r\n\r\n    const handleCancelDeletionButtonClick = () => {\r\n        setIsDeleteConfirmationDialogShown(false);\r\n    };\r\n\r\n    const handleConfirmDeletionButtonClick = () => {\r\n        removeVideo(id);\r\n    };\r\n\r\n    const actions = [\r\n        {\r\n            isShown: (layout === Layout.Focused || layout === Layout.Overlay) && !isMainPlayer,\r\n            title: 'Focus',\r\n            icon: <CenterFocusWeak fontSize=\"small\" />,\r\n            onClick: handleFocusButtonClick,\r\n        },\r\n        {\r\n            isShown: canMoveLeft,\r\n            title: 'Move left',\r\n            icon: <ArrowBack fontSize=\"small\" />,\r\n            onClick: () => movePlayerLeft(id),\r\n        },\r\n        {\r\n            isShown: layout === Layout.Focused,\r\n            title: isMainPlayer ? 'Move down' : 'Move up',\r\n            icon: isMainPlayer ? <ArrowDownward fontSize=\"small\" /> : <ArrowUpward fontSize=\"small\" />,\r\n            onClick: handleMoveButtonClick,\r\n        },\r\n        {\r\n            isShown: canMoveRight,\r\n            title: 'Move right',\r\n            icon: <ArrowForward fontSize=\"small\" />,\r\n            onClick: () => movePlayerRight(id),\r\n        },\r\n        {\r\n            isShown: true,\r\n            title: 'Hide controls overlay',\r\n            icon: <VisibilityOff fontSize=\"small\" />,\r\n            onClick: handleHideButtonClick,\r\n        },\r\n        {\r\n            isShown: true,\r\n            title: 'Remove video',\r\n            icon: <Delete fontSize=\"small\" />,\r\n            onClick: handleDeleteButtonClick,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            {dense ? (\r\n                <>\r\n                    <IconButton size=\"small\" ref={settingsButtonRef} onClick={handleSettingsButtonClick}>\r\n                        <Settings fontSize=\"small\" />\r\n                    </IconButton>\r\n                    <div style={{ width: '4px' }} />\r\n\r\n                    <Menu anchorEl={settingsButtonRef.current} open={isSettingsMenuOpen} onClose={handleSettingsMenuHide} onClick={handleSettingsMenuHide}>\r\n                        {actions.map(({ isShown, title, icon, onClick }) => isShown ? (\r\n                            <MenuItem dense key={title} onClick={onClick}>\r\n                                <ListItemIcon>\r\n                                    {icon}\r\n                                </ListItemIcon>\r\n                                <Typography variant=\"body1\">{title}</Typography>\r\n                            </MenuItem>\r\n                        ) : null)}\r\n                    </Menu>\r\n                </>\r\n            ) : (\r\n                actions.map(({ isShown, title, icon, onClick }) => isShown ? (\r\n                    <div key={title}>\r\n                        <Tooltip title={title}>\r\n                            <IconButton size=\"small\" onClick={onClick}>\r\n                                {icon}\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <div style={{ width: '4px' }} />\r\n                    </div>\r\n                ) : null)\r\n            )}\r\n\r\n            <div style={{ width: '4px' }} />\r\n\r\n            <Dialog open={isDeleteConfirmationDialogShown}>\r\n                <DialogTitle>Confirm deletion</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Are you sure you want to delete this video?\r\n                    </DialogContentText>\r\n                    <DialogActions>\r\n                        <Button onClick={handleCancelDeletionButtonClick} color=\"default\">Cancel</Button>\r\n                        <Button onClick={handleConfirmDeletionButtonClick} color=\"primary\" variant=\"contained\">Delete</Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, OwnProps, State>(\r\n    (state, ownProps) => ({\r\n        layout: getLayout(state),\r\n        isMainPlayer: getIsPlayerMain(ownProps.id)(state),\r\n        canMoveLeft: canMovePlayerLeft(ownProps.id)(state),\r\n        canMoveRight: canMovePlayerRight(ownProps.id)(state),\r\n    }),\r\n    {\r\n        movePlayerToMainPlayers,\r\n        movePlayerToSecondaryPlayers,\r\n        makePlayerMain,\r\n        movePlayerLeft,\r\n        movePlayerRight,\r\n        removeVideo,\r\n    },\r\n)(IndividualPlaybackControlBarActions);\r\n","import { connect } from 'react-redux';\r\nimport { State } from '../../redux/types';\r\nimport {\r\n    getIsPlayerPlaying,\r\n    getIsPlayerBuffering,\r\n    getPlayerDurationSeconds,\r\n    getPlayerVolume,\r\n    getPlayerPlayedFraction,\r\n    getPlayerLoadedFraction,\r\n    getIsPlayerMuted,\r\n} from '../../redux/selectors';\r\nimport {\r\n    playerStartPlaying,\r\n    playerStopPlaying,\r\n    playerUpdateVolume,\r\n    playerMute,\r\n    playerUnmute,\r\n    playerPushPendingSeek,\r\n    playerStartBuffering,\r\n} from '../../redux/actions';\r\nimport { PlaybackControlBar } from '../PlaybackControlBar';\r\nimport IndividualPlaybackControlBarActions from './IndividualPlaybackControlBarActions';\r\n\r\ninterface OwnProps {\r\n    id: string;\r\n    onHide?: () => void;\r\n\r\n    playerWidth?: number;\r\n    playerHeight?: number;\r\n}\r\n\r\ninterface StateProps {\r\n    isPlaying: boolean;\r\n    isBuffering: boolean;\r\n    isMuted: boolean;\r\n    volume: number;\r\n    durationSeconds: number;\r\n    playedFraction: number;\r\n    loadedFraction: number;\r\n}\r\n\r\ninterface DispatchProps {\r\n    playerStartPlaying: (id: string) => void;\r\n    playerStopPlaying: (id: string) => void;\r\n    playerUpdateVolume: (id: string, { volume }: { volume: number }) => void;\r\n    playerMute: (id: string) => void;\r\n    playerUnmute: (id: string) => void;\r\n    playerPushPendingSeek: (id: string, { seekToSeconds }: { seekToSeconds: number }) => void;\r\n    playerStartBuffering: (id: string) => void;\r\n}\r\n\r\nexport type IndividualPlaybackControlBarProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst IndividualPlaybackControlBar: React.FC<IndividualPlaybackControlBarProps> = ({\r\n    id,\r\n    isMuted,\r\n    onHide,\r\n    playerStartPlaying,\r\n    playerStopPlaying,\r\n    playerUpdateVolume,\r\n    playerMute,\r\n    playerUnmute,\r\n    playerPushPendingSeek,\r\n    playerStartBuffering,\r\n    playerWidth,\r\n    playerHeight,\r\n    ...other\r\n}) => {\r\n    const handleMuteUnmute = () => {\r\n        if (isMuted) {\r\n            playerUnmute(id);\r\n        } else {\r\n            playerMute(id);\r\n        }\r\n    };\r\n\r\n    const handleSeek = (seekToSeconds: number) => {\r\n        playerStartBuffering(id);\r\n        playerPushPendingSeek(id, { seekToSeconds });\r\n    };\r\n\r\n    const dense = playerWidth ? playerWidth < 320 : false;\r\n\r\n    const playbackControlBarProps = {\r\n        isMuted,\r\n        onPlay: () => playerStartPlaying(id),\r\n        onPause: () => playerStopPlaying(id),\r\n        onMuteUnmute: handleMuteUnmute,\r\n        onVolumeChange: (volume: number) => playerUpdateVolume(id, { volume }),\r\n        onSeek: handleSeek,\r\n\r\n        actions: <IndividualPlaybackControlBarActions id={id} onHide={onHide} dense={dense} />,\r\n\r\n        ...other,\r\n    };\r\n\r\n    return <PlaybackControlBar {...playbackControlBarProps} />\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, OwnProps, State>(\r\n    (state, { id }) => ({\r\n        isPlaying: getIsPlayerPlaying(id)(state),\r\n        isBuffering: getIsPlayerBuffering(id)(state),\r\n        isMuted: getIsPlayerMuted(id)(state),\r\n        volume: getPlayerVolume(id)(state),\r\n        durationSeconds: getPlayerDurationSeconds(id)(state),\r\n        playedFraction: getPlayerPlayedFraction(id)(state),\r\n        loadedFraction: getPlayerLoadedFraction(id)(state),\r\n    }),\r\n    {\r\n        playerStartPlaying,\r\n        playerStopPlaying,\r\n        playerUpdateVolume,\r\n        playerMute,\r\n        playerUnmute,\r\n        playerPushPendingSeek,\r\n        playerStartBuffering,\r\n    },\r\n)(IndividualPlaybackControlBar);","import styled from 'styled-components';\r\n\r\nexport const SettingsMenuContainer = styled.div`\r\n    width: 220px;\r\n    height: 500px;\r\n    padding-bottom: 16px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n\r\n    overflow: hidden;\r\n    pointer-events: none;\r\n`;\r\n\r\nexport const SettingsMenuPaper = styled.div<{ height: number }>`\r\n    width: 100%;\r\n    height: ${props => props.height}px;\r\n\r\n    border-radius: 4px;\r\n    background-color: rgba(28, 28, 28, 0.9);\r\n    overflow: hidden;\r\n    pointer-events: all;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n\r\n    transition: height 100ms;\r\n`;\r\n\r\nexport const SettingsMenuListItemContainer = styled.div`\r\n    width: 100%;\r\n    height: 24px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const SettingsMenuListItemValueContainer = styled.div`\r\n    margin-right: -8px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`;\r\n\r\nexport const SettingsMenuListItemTitle = styled.span`\r\n    font-size: 0.875rem;\r\n    line-height: 24px;\r\n`;\r\n\r\nexport const SettingsMenuListItemValue = styled.span`\r\n    margin-top: 2px;\r\n    font-size: 0.75rem;\r\n    line-height: 24px;\r\n`;\r\n\r\nexport const SettingsMenuListItemSpacer = styled.div`\r\n    width: 64px;\r\n`;\r\n\r\nexport const SettingsMenuSectionHeader = styled.div`\r\n    height: 32px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`;\r\n\r\nexport const SettingsMenuDescriptionListItemContainer = styled.div`\r\n    width: calc(100% + 20px);\r\n    margin-left: -12px;\r\n    margin-right: -8px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: flex-start;\r\n`;\r\n\r\nexport const SettingsMenuDescriptionListItemCheckmarContainer = styled.div`\r\n    width: 36px;\r\n    padding: 4px;\r\n    padding-right: 8px;\r\n`;\r\n\r\nexport const SettingsMenuDescriptionListItemTextContainer = styled.div`\r\n    flex: 1;\r\n    padding-top: 4px;\r\n    padding-bottom: 4px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const SettingsMenuDescriptionListItemTitleContainer = styled.div`\r\n    font-size: 0.875rem;\r\n    margin-bottom: 2px;\r\n`;\r\n\r\nexport const SettingsMenuDescriptionListItemSubitleContainer = styled.div`\r\n    font-size: 0.75rem;\r\n    color: rgba(255, 255, 255, 0.7);\r\n`;\r\n","import { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { Icon, List, ListItem, Popper, Slide, Divider } from '@material-ui/core';\r\nimport { Check, ChevronLeft, ChevronRight } from '@material-ui/icons';\r\nimport { ControlsMode, Layout, State } from '../../redux/types';\r\nimport { getControlsMode, getLayout } from '../../redux/selectors';\r\nimport { changeControlsMode, changeLayout } from '../../redux/actions';\r\nimport {\r\n    SettingsMenuContainer,\r\n    SettingsMenuDescriptionListItemCheckmarContainer,\r\n    SettingsMenuDescriptionListItemContainer,\r\n    SettingsMenuDescriptionListItemSubitleContainer,\r\n    SettingsMenuDescriptionListItemTextContainer,\r\n    SettingsMenuDescriptionListItemTitleContainer,\r\n    SettingsMenuListItemContainer,\r\n    SettingsMenuListItemTitle,\r\n    SettingsMenuListItemValue,\r\n    SettingsMenuListItemValueContainer,\r\n    SettingsMenuPaper,\r\n    SettingsMenuSectionHeader,\r\n} from './style';\r\n\r\ninterface OwnProps {\r\n    isOpen: boolean;\r\n    anchorElement: Element | null;\r\n}\r\n\r\ninterface StateProps {\r\n    controlsMode: ControlsMode;\r\n    layout: Layout;\r\n}\r\n\r\ninterface DispatchProps {\r\n    changeControlsMode: (controlsMode: ControlsMode) => void;\r\n    changeLayout: (layout: Layout) => void;\r\n}\r\n\r\nexport type MasterPlaybackControlBarSettingsMenuProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst MasterPlaybackControlBarSettingsMenu: React.FC<MasterPlaybackControlBarSettingsMenuProps> = ({\r\n    isOpen,\r\n    anchorElement,\r\n    controlsMode,\r\n    layout,\r\n    changeControlsMode,\r\n    changeLayout,\r\n}) => {\r\n    const [selectedMenuIndex, setSelectedMenuIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setSelectedMenuIndex(0);\r\n    }, [isOpen]);\r\n\r\n    const popperProps = {\r\n        open: isOpen,\r\n        anchorEl: anchorElement,\r\n        placement: 'top' as 'top',\r\n        style: {\r\n            zIndex: 10000,\r\n            pointerEvents: 'none' as 'none',\r\n        },\r\n    };\r\n\r\n    const settingsMenuContainerHeight = [80, 288, 267][selectedMenuIndex];\r\n\r\n    const slideBaseProps = {\r\n        appear: false,\r\n        mountOnEnter: true,\r\n        unmountOnExit: true,\r\n    };\r\n\r\n    return (\r\n        <Popper {...popperProps}>\r\n            <SettingsMenuContainer>\r\n                <SettingsMenuPaper height={settingsMenuContainerHeight}>\r\n                    <Slide {...slideBaseProps} direction=\"right\" in={selectedMenuIndex === 0}>\r\n                        <List dense>\r\n                            <ListItem button onClick={() => setSelectedMenuIndex(1)}>\r\n                                <SettingsMenuListItemContainer>\r\n                                    <SettingsMenuListItemTitle>Layout</SettingsMenuListItemTitle>\r\n                                    <SettingsMenuListItemValueContainer>\r\n                                        <SettingsMenuListItemValue>{layout}</SettingsMenuListItemValue>\r\n                                        <Icon>\r\n                                            <ChevronRight />\r\n                                        </Icon>\r\n                                    </SettingsMenuListItemValueContainer>\r\n                                </SettingsMenuListItemContainer>\r\n                            </ListItem>\r\n                            <ListItem button onClick={() => setSelectedMenuIndex(2)}>\r\n                                <SettingsMenuListItemContainer>\r\n                                    <SettingsMenuListItemTitle>Controls</SettingsMenuListItemTitle>\r\n                                    <SettingsMenuListItemValueContainer>\r\n                                        <SettingsMenuListItemValue>{controlsMode}</SettingsMenuListItemValue>\r\n                                        <Icon>\r\n                                            <ChevronRight />\r\n                                        </Icon>\r\n                                    </SettingsMenuListItemValueContainer>\r\n                                </SettingsMenuListItemContainer>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Slide>\r\n\r\n                    <Slide {...slideBaseProps} direction=\"left\" in={selectedMenuIndex === 1}>\r\n                        <List dense>\r\n                            <ListItem button onClick={() => setSelectedMenuIndex(0)}>\r\n                                <SettingsMenuSectionHeader>\r\n                                    <Icon style={{ marginLeft: '-8px', marginRight: '8px' }}>\r\n                                        <ChevronLeft />\r\n                                    </Icon>\r\n                                    <SettingsMenuListItemTitle>Layout</SettingsMenuListItemTitle>\r\n                                </SettingsMenuSectionHeader>\r\n                            </ListItem>\r\n                            <Divider style={{ backgroundColor: 'rgba(255, 255, 255, 0.3)' }} />\r\n                            <ListItem button onClick={() => changeLayout(Layout.Overlay)}>\r\n                                <SettingsMenuDescriptionListItemContainer>\r\n                                    <SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                        {layout === Layout.Overlay ? (\r\n                                            <Icon>\r\n                                                <Check />\r\n                                            </Icon>\r\n                                        ) : null}\r\n                                    </SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                    <SettingsMenuDescriptionListItemTextContainer>\r\n                                        <SettingsMenuDescriptionListItemTitleContainer>Overlay</SettingsMenuDescriptionListItemTitleContainer>\r\n                                        <SettingsMenuDescriptionListItemSubitleContainer>\r\n                                            One big player in the middle, the rest in an overlaid list at the top right.\r\n                                        </SettingsMenuDescriptionListItemSubitleContainer>\r\n                                    </SettingsMenuDescriptionListItemTextContainer>\r\n                                </SettingsMenuDescriptionListItemContainer>\r\n                            </ListItem>\r\n                            <ListItem button onClick={() => changeLayout(Layout.Focused)}>\r\n                                <SettingsMenuDescriptionListItemContainer>\r\n                                    <SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                        {layout === Layout.Focused ? (\r\n                                            <Icon>\r\n                                                <Check />\r\n                                            </Icon>\r\n                                        ) : null}\r\n                                    </SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                    <SettingsMenuDescriptionListItemTextContainer>\r\n                                        <SettingsMenuDescriptionListItemTitleContainer>Focused</SettingsMenuDescriptionListItemTitleContainer>\r\n                                        <SettingsMenuDescriptionListItemSubitleContainer>\r\n                                            One or more big players at the top, the rest in a list of small players at the bottom.\r\n                                        </SettingsMenuDescriptionListItemSubitleContainer>\r\n                                    </SettingsMenuDescriptionListItemTextContainer>\r\n                                </SettingsMenuDescriptionListItemContainer>\r\n                            </ListItem>\r\n                            <ListItem button onClick={() => changeLayout(Layout.Grid)}>\r\n                                <SettingsMenuDescriptionListItemContainer>\r\n                                    <SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                        {layout === Layout.Grid ? (\r\n                                            <Icon>\r\n                                                <Check />\r\n                                            </Icon>\r\n                                        ) : null}\r\n                                    </SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                    <SettingsMenuDescriptionListItemTextContainer>\r\n                                        <SettingsMenuDescriptionListItemTitleContainer>Grid</SettingsMenuDescriptionListItemTitleContainer>\r\n                                        <SettingsMenuDescriptionListItemSubitleContainer>\r\n                                            A grid of equally sized players.\r\n                                        </SettingsMenuDescriptionListItemSubitleContainer>\r\n                                    </SettingsMenuDescriptionListItemTextContainer>\r\n                                </SettingsMenuDescriptionListItemContainer>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Slide>\r\n\r\n                    <Slide {...slideBaseProps} direction=\"left\" in={selectedMenuIndex === 2}>\r\n                        <List dense>\r\n                            <ListItem button onClick={() => setSelectedMenuIndex(0)}>\r\n                                <SettingsMenuSectionHeader>\r\n                                    <Icon style={{ marginLeft: '-8px', marginRight: '8px' }}>\r\n                                        <ChevronLeft />\r\n                                    </Icon>\r\n                                    <SettingsMenuListItemTitle>Controls</SettingsMenuListItemTitle>\r\n                                </SettingsMenuSectionHeader>\r\n                            </ListItem>\r\n                            <Divider style={{ backgroundColor: 'rgba(255, 255, 255, 0.3)' }} />\r\n                            <ListItem button onClick={() => changeControlsMode(ControlsMode.Individual)}>\r\n                                <SettingsMenuDescriptionListItemContainer>\r\n                                    <SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                        {controlsMode === ControlsMode.Individual ? (\r\n                                            <Icon>\r\n                                                <Check />\r\n                                            </Icon>\r\n                                        ) : null}\r\n                                    </SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                    <SettingsMenuDescriptionListItemTextContainer>\r\n                                        <SettingsMenuDescriptionListItemTitleContainer>Individual</SettingsMenuDescriptionListItemTitleContainer>\r\n                                        <SettingsMenuDescriptionListItemSubitleContainer>\r\n                                            Show controls for each player individually. Keyboard and mouse actions will be executed on the hovered player.\r\n                                        </SettingsMenuDescriptionListItemSubitleContainer>\r\n                                    </SettingsMenuDescriptionListItemTextContainer>\r\n                                </SettingsMenuDescriptionListItemContainer>\r\n                            </ListItem>\r\n                            <ListItem button onClick={() => changeControlsMode(ControlsMode.Grouped)}>\r\n                                <SettingsMenuDescriptionListItemContainer>\r\n                                    <SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                        {controlsMode === ControlsMode.Grouped ? (\r\n                                            <Icon>\r\n                                                <Check />\r\n                                            </Icon>\r\n                                        ) : null}\r\n                                    </SettingsMenuDescriptionListItemCheckmarContainer>\r\n                                    <SettingsMenuDescriptionListItemTextContainer>\r\n                                        <SettingsMenuDescriptionListItemTitleContainer>Grouped</SettingsMenuDescriptionListItemTitleContainer>\r\n                                        <SettingsMenuDescriptionListItemSubitleContainer>\r\n                                            Only show the main controls. Keyboard and mouse actions will affect all players at the same time.\r\n                                        </SettingsMenuDescriptionListItemSubitleContainer>\r\n                                    </SettingsMenuDescriptionListItemTextContainer>\r\n                                </SettingsMenuDescriptionListItemContainer>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Slide>\r\n                </SettingsMenuPaper>\r\n            </SettingsMenuContainer>\r\n        </Popper>\r\n    );\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, OwnProps, State>(\r\n    createStructuredSelector({\r\n        controlsMode: getControlsMode,\r\n        layout: getLayout,\r\n    }),\r\n    {\r\n        changeControlsMode,\r\n        changeLayout,\r\n    },\r\n)(MasterPlaybackControlBarSettingsMenu);\r\n","import { useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { ClickAwayListener, IconButton } from '@material-ui/core';\r\nimport { Settings, Fullscreen, FullscreenExit } from '@material-ui/icons';\r\nimport { State } from '../../redux/types';\r\nimport { getIsFullscreen } from '../../redux/selectors';\r\nimport { toggleFullscreen } from '../../redux/actions';\r\nimport MasterPlaybackControlBarSettingsMenu from './MasterPlaybackControlBarSettingsMenu';\r\n\r\ninterface OwnProps {\r\n    isVisible: boolean;\r\n}\r\n\r\ninterface StateProps {\r\n    isFullscreen: boolean;\r\n}\r\n\r\ninterface DispatchProps {\r\n    toggleFullscreen: () => void;\r\n}\r\n\r\nexport type MasterPlaybackControlBarActionsProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst MasterPlaybackControlBarActions: React.FC<MasterPlaybackControlBarActionsProps> = ({\r\n    isVisible,\r\n    isFullscreen,\r\n    toggleFullscreen,\r\n}) => {\r\n    const settingsButtonRef = useRef<HTMLButtonElement | null>(null);\r\n    const [isSettingsMenuOpen, setIsSettingsMenuOpen] = useState(false);\r\n\r\n    const handleSettingsClick = () => setIsSettingsMenuOpen(!isSettingsMenuOpen);\r\n\r\n    const settingsMenuProps = {\r\n        isOpen: isVisible && isSettingsMenuOpen,\r\n        anchorElement: settingsButtonRef.current,\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ClickAwayListener onClickAway={() => setIsSettingsMenuOpen(false)}>\r\n                <div>\r\n                    <IconButton size=\"small\" onClick={handleSettingsClick} ref={settingsButtonRef}>\r\n                        <div style={{ width: '24px', height: '24px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                            <Settings fontSize=\"small\" />\r\n                        </div>\r\n                    </IconButton>\r\n                    <MasterPlaybackControlBarSettingsMenu {...settingsMenuProps} />\r\n                </div>\r\n            </ClickAwayListener>\r\n\r\n            <IconButton size=\"small\" onClick={toggleFullscreen}>\r\n                {isFullscreen ? <FullscreenExit /> : <Fullscreen />}\r\n            </IconButton>\r\n\r\n            <div style={{ width: '4px' }} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, {}, State>(\r\n    createStructuredSelector({\r\n        isFullscreen: getIsFullscreen,\r\n    }),\r\n    {\r\n        toggleFullscreen,\r\n    },\r\n)(MasterPlaybackControlBarActions);\r\n","import { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { State } from '../../redux/types';\r\nimport {\r\n    getIsMasterPlayerBuffering,\r\n    getIsMasterPlayerMuted,\r\n    getIsMasterPlayerPlaying,\r\n    getMasterPlayerDurationSeconds,\r\n    getMasterPlayerLoadedFraction,\r\n    getMasterPlayerPlayedFraction,\r\n    getMasterPlayerVolume,\r\n} from '../../redux/selectors';\r\nimport {\r\n    startPlayback,\r\n    stopPlayback,\r\n    seekTo,\r\n    masterPlayerUpdateVolume,\r\n    masterPlayerMute,\r\n    masterPlayerUnmute,\r\n} from '../../redux/actions';\r\nimport { PlaybackControlBar } from '../PlaybackControlBar';\r\nimport MasterPlaybackControlBarActions from './MasterPlaybackControlBarActions';\r\n\r\ninterface OwnProps {\r\n    isVisible: boolean;\r\n    playerWidth?: number;\r\n    playerHeight?: number;\r\n}\r\n\r\ninterface StateProps {\r\n    isPlaying: boolean;\r\n    isBuffering: boolean;\r\n    isMuted: boolean;\r\n    volume: number;\r\n    durationSeconds: number;\r\n    playedFraction: number;\r\n    loadedFraction: number;\r\n}\r\n\r\ninterface DispatchProps {\r\n    startPlayback: () => void;\r\n    stopPlayback: () => void;\r\n    updateVolume: (volume: number) => void;\r\n    mute: () => void;\r\n    unmute: () => void;\r\n    seekTo: (seconds: number) => void;\r\n}\r\n\r\ntype MasterPlaybackControlBarProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst MasterPlaybackControlBar: React.FC<MasterPlaybackControlBarProps> = ({\r\n    isVisible,\r\n    isMuted,\r\n    startPlayback,\r\n    stopPlayback,\r\n    updateVolume,\r\n    mute,\r\n    unmute,\r\n    seekTo,\r\n    ...other\r\n}) => {\r\n    const handleMuteUnmute = () => {\r\n        if (isMuted) {\r\n            unmute();\r\n        } else {\r\n            mute();\r\n        }\r\n    };\r\n\r\n    const playbackControlBarProps = {\r\n        isMuted,\r\n        onPlay: startPlayback,\r\n        onPause: stopPlayback,\r\n        onMuteUnmute: handleMuteUnmute,\r\n        onVolumeChange: updateVolume,\r\n        onSeek: seekTo,\r\n\r\n        actions: <MasterPlaybackControlBarActions isVisible={isVisible} />,\r\n\r\n        ...other,\r\n    };\r\n\r\n    return <PlaybackControlBar {...playbackControlBarProps} />;\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, {}, State>(\r\n    createStructuredSelector({\r\n        isPlaying: getIsMasterPlayerPlaying,\r\n        isBuffering: getIsMasterPlayerBuffering,\r\n        isMuted: getIsMasterPlayerMuted,\r\n        volume: getMasterPlayerVolume,\r\n        durationSeconds: getMasterPlayerDurationSeconds,\r\n        playedFraction: getMasterPlayerPlayedFraction,\r\n        loadedFraction: getMasterPlayerLoadedFraction,\r\n    }),\r\n    {\r\n        startPlayback,\r\n        stopPlayback,\r\n        seekTo,\r\n        updateVolume: masterPlayerUpdateVolume,\r\n        mute: masterPlayerMute,\r\n        unmute: masterPlayerUnmute,\r\n    },\r\n)(MasterPlaybackControlBar);\r\n","import styled from 'styled-components';\r\n\r\ninterface PlayerControlOverlayContainerProps {\r\n    isBlockingPointerEvents: boolean;\r\n    isCursorHidden: boolean;\r\n    zIndex?: number;\r\n}\r\n\r\nexport const PlayerControlOverlayContainer = styled.div<PlayerControlOverlayContainerProps>`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n\r\n    pointer-events: ${props => props.isBlockingPointerEvents ? 'initial' : 'none' };\r\n    ${props => props.isCursorHidden ? 'cursor: none;' :''}\r\n\r\n    ${props => props.zIndex ? `z-index: ${props.zIndex};` : ''}\r\n\r\n    overflow: hidden;\r\n`;\r\n\r\ninterface WithVisibility {\r\n    isVisible: boolean;\r\n}\r\n\r\nexport const PlaybackControlBarWrapper = styled.div<WithVisibility>`\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    pointer-events: all;\r\n\r\n    transition: opacity 200ms;\r\n    opacity: ${props => props.isVisible ? 1 : 0};\r\n`;\r\n\r\nexport const PlaybackControlOverlayBottomShadow = styled.div<WithVisibility>`\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    pointer-events: none;\r\n\r\n    height: 30%;\r\n\r\n    background: linear-gradient(0deg, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.1) 70%, rgba(0, 0, 0, 0));\r\n\r\n    transition: opacity 200ms;\r\n    opacity: ${props => props.isVisible ? 1 : 0};\r\n`;\r\n\r\nexport const PlayerControlOverlayClickCapture = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n`;\r\n\r\nexport const PlaybackControlBarFlexSpacer = styled.div`\r\n    height: 46px;\r\n`;\r\n\r\nexport const MinimizedButtonContainer = styled.div`\r\n    position: absolute;\r\n\r\n    top: calc(50% - 20px);\r\n    right: 8px;\r\n\r\n    width: 40px;\r\n    height: 40px;\r\n\r\n    z-index: 10;\r\n`;\r\n","import { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Tooltip, Fab } from '@material-ui/core';\r\nimport { Visibility } from '@material-ui/icons';\r\nimport { changeFocusedPlayerId, playerStartPlaying, playerStopPlaying, startPlayback, stopPlayback } from '../../redux/actions';\r\nimport { getControlsMode, getIsFullscreen, getIsMasterPlayerPlaying, getIsPlayerPlaying } from '../../redux/selectors';\r\nimport { ControlsMode, State } from '../../redux/types';\r\nimport { IndividualPlaybackControlBar } from '../IndividualPlaybackControlBar';\r\nimport { MasterPlaybackControlBar } from '../MasterPlaybackControlBar';\r\nimport {\r\n    PlayerControlOverlayContainer,\r\n    PlaybackControlBarWrapper,\r\n    PlaybackControlBarFlexSpacer,\r\n    PlaybackControlOverlayBottomShadow,\r\n    PlayerControlOverlayClickCapture,\r\n    MinimizedButtonContainer,\r\n} from './style';\r\n\r\ninterface OwnProps {\r\n    id?: string;\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\ninterface StateProps {\r\n    isPlaying: boolean;\r\n    isFullscreen: boolean;\r\n    controlsMode: ControlsMode;\r\n}\r\n\r\ninterface DispatchProps {\r\n    playerStartPlaying: (id: string) => void;\r\n    playerStopPlaying: (id: string) => void;\r\n    masterPlayerStartPlaying: () => void;\r\n    masterPlayerStopPlaying: () => void;\r\n    changeFocusedPlayerId: (id: string | null) => void;\r\n}\r\n\r\nexport type PlayerControlOverlayProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst PlayerControlOverlay: React.FC<PlayerControlOverlayProps> = ({\r\n    id,\r\n    width,\r\n    height,\r\n    isPlaying,\r\n    isFullscreen,\r\n    controlsMode,\r\n    playerStartPlaying,\r\n    playerStopPlaying,\r\n    masterPlayerStartPlaying,\r\n    masterPlayerStopPlaying,\r\n    changeFocusedPlayerId,\r\n}) => {\r\n    const hideControlsTimeoutId = useRef<number | null>(null);\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [isMouseOverPlayer, setIsMouseOverPlayer] = useState(false);\r\n    const [isControlBarVisible, setIsControlBarVisible] = useState(true);\r\n\r\n    const updateHideTimeout = useCallback(() => {\r\n        if (hideControlsTimeoutId.current) {\r\n            window.clearTimeout(hideControlsTimeoutId.current);\r\n        }\r\n\r\n        hideControlsTimeoutId.current = window.setTimeout(() => {\r\n            if (isPlaying) {\r\n                setIsControlBarVisible(false);\r\n            }\r\n\r\n            hideControlsTimeoutId.current = null;\r\n        }, 3000);\r\n    }, [isPlaying]);\r\n\r\n    useEffect(() => {\r\n        updateHideTimeout();\r\n    }, [isPlaying, updateHideTimeout]);\r\n\r\n    useEffect(() => {\r\n        if (!id || (id && controlsMode === ControlsMode.Individual)) {\r\n            setIsControlBarVisible(!isPlaying || isMouseOverPlayer);\r\n        } else {\r\n            setIsControlBarVisible(false);\r\n        }\r\n    }, [isPlaying, isMouseOverPlayer, controlsMode, id]);\r\n\r\n    const handleMouseEnter = () => {\r\n        setIsMouseOverPlayer(true);\r\n        changeFocusedPlayerId(id || null);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsMouseOverPlayer(false);\r\n        changeFocusedPlayerId(null);\r\n    };\r\n\r\n    const handleMouseMove = () => {\r\n        if (isMouseOverPlayer) {\r\n            setIsControlBarVisible(true);\r\n        }\r\n\r\n        updateHideTimeout();\r\n    };\r\n\r\n    const handleClick = () => {\r\n        if (isPlaying) {\r\n            if (id) {\r\n                playerStopPlaying(id);\r\n            } else {\r\n                masterPlayerStopPlaying();\r\n            }\r\n        } else {\r\n            updateHideTimeout();\r\n\r\n            if (id) {\r\n                playerStartPlaying(id);\r\n            } else {\r\n                masterPlayerStartPlaying();\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleHide = () => setIsMinimized(true);\r\n    const handleShow = () => setIsMinimized(false);\r\n\r\n    const isMaster = !id;\r\n    const isOverlaid = (isMaster && isFullscreen) || !isMaster;\r\n    const isBlockingPointerEvents = (isMaster && controlsMode === ControlsMode.Grouped) || !isMaster;\r\n\r\n    const playbackControlOverlayContainerProps = {\r\n        isBlockingPointerEvents,\r\n        isCursorHidden: !isControlBarVisible,\r\n        zIndex: isMaster ? 3 : undefined,\r\n        onMouseEnter: handleMouseEnter,\r\n        onMouseLeave: handleMouseLeave,\r\n        onMouseMove: handleMouseMove,\r\n    };\r\n\r\n    if (isMinimized) {\r\n        return (\r\n            <MinimizedButtonContainer>\r\n                <Tooltip title=\"Show controls overlay\">\r\n                    <Fab size=\"small\" onClick={handleShow}>\r\n                        <Visibility fontSize=\"small\" />\r\n                    </Fab>\r\n                </Tooltip>\r\n            </MinimizedButtonContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PlayerControlOverlayContainer {...playbackControlOverlayContainerProps}>\r\n                <PlaybackControlOverlayBottomShadow isVisible={isControlBarVisible && isOverlaid} />\r\n                <PlayerControlOverlayClickCapture onClick={handleClick} />\r\n                <PlaybackControlBarWrapper isVisible={isControlBarVisible || !isOverlaid}>\r\n                    {id\r\n                        ? <IndividualPlaybackControlBar id={id} onHide={handleHide} playerWidth={width} playerHeight={height} />\r\n                        : <MasterPlaybackControlBar isVisible={isControlBarVisible || !isOverlaid} playerWidth={width} playerHeight={height} />\r\n                    }\r\n                </PlaybackControlBarWrapper>\r\n            </PlayerControlOverlayContainer>\r\n\r\n            {(isMaster && !isFullscreen) ? <PlaybackControlBarFlexSpacer /> : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, OwnProps, State>(\r\n    (state: State, { id }: OwnProps) => ({\r\n        isPlaying: id ? getIsPlayerPlaying(id)(state) : getIsMasterPlayerPlaying(state),\r\n        isFullscreen: getIsFullscreen(state),\r\n        controlsMode: getControlsMode(state),\r\n    }),\r\n    {\r\n        playerStartPlaying,\r\n        playerStopPlaying,\r\n        masterPlayerStartPlaying: startPlayback,\r\n        masterPlayerStopPlaying: stopPlayback,\r\n        changeFocusedPlayerId,\r\n    },\r\n)(PlayerControlOverlay);\r\n","import styled from 'styled-components';\r\n\r\ninterface VideoPlayerContainerProps {\r\n    width: number;\r\n    height: number;\r\n    shadow?: boolean;\r\n}\r\n\r\nexport const VideoPlayerContainer = styled.div<VideoPlayerContainerProps>`\r\n    position: relative;\r\n\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n\r\n    ${props => props.shadow ? `\r\n        box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.4);\r\n    ` : null}\r\n`;\r\n\r\nexport const ReactPlayerWrapper = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n`;\r\n","import { useRef, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactPlayer from 'react-player';\r\nimport { State, Video } from '../../redux/types';\r\nimport {\r\n    getIsPlayerPlaying,\r\n    getPlayerVolume,\r\n    getPlayerPendingSeeks,\r\n    getIsPlayerMuted,\r\n    getIsMasterPlayerBuffering,\r\n    getIsMasterPlayerMuted,\r\n    getMasterPlayerVolume,\r\n} from '../../redux/selectors';\r\nimport {\r\n    initializePlayer,\r\n    playerReady,\r\n    playerStartPlaying,\r\n    playerStopPlaying,\r\n    playerStartBuffering,\r\n    playerStopBuffering,\r\n    playerEndVideo,\r\n    playerUpdateDuration,\r\n    playerUpdateProgress,\r\n    playerPopPendingSeek,\r\n} from '../../redux/actions';\r\nimport { PlayerControlOverlay } from '../PlayerControlOverlay';\r\nimport { ReactPlayerWrapper, VideoPlayerContainer } from './style';\r\n\r\ninterface OwnProps {\r\n    id: string;\r\n    video: Video;\r\n    width: number;\r\n    height: number;\r\n    shadow?: boolean;\r\n}\r\n\r\ninterface StateProps {\r\n    isPlaying: boolean;\r\n    isMasterBuffering: boolean;\r\n    volume: number;\r\n    masterVolume: number;\r\n    isPlayerMuted: boolean;\r\n    isMasterMuted: boolean;\r\n    pendingSeeks: number[];\r\n}\r\n\r\ninterface DispatchProps {\r\n    initializePlayer: typeof initializePlayer;\r\n    playerReady: typeof playerReady;\r\n    playerStartPlaying: typeof playerStartPlaying;\r\n    playerStopPlaying: typeof playerStopPlaying;\r\n    playerStartBuffering: typeof playerStartBuffering;\r\n    playerStopBuffering: typeof playerStopBuffering;\r\n    playerEndVideo: typeof playerEndVideo;\r\n    playerUpdateDuration: typeof playerUpdateDuration;\r\n    playerUpdateProgress: typeof playerUpdateProgress;\r\n    playerPopPendingSeek: typeof playerPopPendingSeek;\r\n}\r\n\r\ntype VideoPlayerProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({\r\n    id,\r\n    video,\r\n    width,\r\n    height,\r\n    shadow,\r\n    isPlaying,\r\n    isMasterBuffering,\r\n    volume,\r\n    masterVolume,\r\n    isPlayerMuted,\r\n    isMasterMuted,\r\n    pendingSeeks,\r\n    initializePlayer,\r\n    playerReady,\r\n    playerStartPlaying,\r\n    playerStopPlaying,\r\n    playerStartBuffering,\r\n    playerStopBuffering,\r\n    playerEndVideo,\r\n    playerUpdateDuration,\r\n    playerUpdateProgress,\r\n    playerPopPendingSeek,\r\n}) => {\r\n    const playerRef = useRef<ReactPlayer | null>(null);\r\n\r\n    useEffect(() => {\r\n        initializePlayer(id);\r\n    }, [id, initializePlayer]);\r\n\r\n    useEffect(() => {\r\n        const { current: player } = playerRef;\r\n\r\n        if (pendingSeeks.length > 0 && player) {\r\n            player.seekTo(pendingSeeks[0], 'seconds');\r\n            playerStartBuffering(id);\r\n            playerPopPendingSeek(id);\r\n        }\r\n    }, [id, pendingSeeks, playerStartBuffering, playerPopPendingSeek]);\r\n\r\n    const handlePlayerBuffer = () => playerStartBuffering(id);\r\n    const handlePlayerBufferEnd = () => playerStopBuffering(id);\r\n    const handlePlayerEnded = () => playerEndVideo(id);\r\n\r\n    const handlePlayerReady = () => {\r\n        playerReady(id);\r\n    };\r\n\r\n    const handlePlayerPlay = () => {\r\n        playerStartPlaying(id);\r\n    };\r\n\r\n    const handlePlayerPause = () => {\r\n        if (!isMasterBuffering) {\r\n            playerStopPlaying(id);\r\n        }\r\n    };\r\n\r\n    const handlePlayerDuration = (durationSeconds: number) => playerUpdateDuration(id, { durationSeconds });\r\n\r\n    const handlePlayerProgress = ({ played, loaded, playedSeconds, loadedSeconds }: { played: number; loaded: number; playedSeconds: number; loadedSeconds: number }) => {\r\n        playerUpdateProgress(id, { playedSeconds, playedFraction: played, loadedSeconds, loadedFraction: loaded });\r\n\r\n        if (loadedSeconds < playedSeconds) {\r\n            playerStartBuffering(id);\r\n        }\r\n\r\n        if (loadedSeconds >= playedSeconds) {\r\n            playerStopBuffering(id);\r\n        }\r\n    };\r\n\r\n    const isMuted = isPlayerMuted || isMasterMuted;\r\n\r\n    const playerProps = {\r\n        url: video.url,\r\n        ref: playerRef,\r\n        controls: false,\r\n        width,\r\n        height,\r\n        volume: isMuted ? 0 : (volume * masterVolume),\r\n        playing: isPlaying && !isMasterBuffering,\r\n        onReady: handlePlayerReady,\r\n        onPlay: handlePlayerPlay,\r\n        onPause: handlePlayerPause,\r\n        onBuffer: handlePlayerBuffer,\r\n        onBufferEnd: handlePlayerBufferEnd,\r\n        onEnded: handlePlayerEnded,\r\n        onDuration: handlePlayerDuration,\r\n        onProgress: handlePlayerProgress,\r\n        config: {\r\n            youtube: {\r\n                playerVars: {\r\n                    disablekb: 1,\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <VideoPlayerContainer width={width} height={height} shadow={shadow}>\r\n            <ReactPlayerWrapper>\r\n                <ReactPlayer {...playerProps}/>\r\n            </ReactPlayerWrapper>\r\n            <PlayerControlOverlay id={id} width={width} height={height} />\r\n        </VideoPlayerContainer>\r\n    );\r\n};\r\n\r\nexport default connect<StateProps, DispatchProps, OwnProps, State>(\r\n    (state, { id }) => ({\r\n        isPlaying: getIsPlayerPlaying(id)(state),\r\n        isMasterBuffering: getIsMasterPlayerBuffering(state),\r\n        volume: getPlayerVolume(id)(state),\r\n        masterVolume: getMasterPlayerVolume(state),\r\n        isPlayerMuted: getIsPlayerMuted(id)(state),\r\n        isMasterMuted: getIsMasterPlayerMuted(state),\r\n        pendingSeeks: getPlayerPendingSeeks(id)(state),\r\n    }),\r\n    {\r\n        initializePlayer,\r\n        playerReady,\r\n        playerStartPlaying,\r\n        playerStopPlaying,\r\n        playerStartBuffering,\r\n        playerStopBuffering,\r\n        playerEndVideo,\r\n        playerUpdateDuration,\r\n        playerUpdateProgress,\r\n        playerPopPendingSeek,\r\n    },\r\n)(VideoPlayer);\r\n","import styled from 'styled-components';\r\nimport { PlayerPosition } from './types';\r\n\r\nexport const PlayersViewContainer = styled.div`\r\n    position: relative;\r\n\r\n    width: 100%;\r\n    flex-grow: 1;\r\n\r\n    overflow: hidden;\r\n`;\r\n\r\ninterface PlayersViewPlayerWrapperProps extends PlayerPosition {\r\n    padding: number;\r\n    zIndex?: number;\r\n}\r\n\r\nexport const PlayersViewPlayerWrapper = styled.div<PlayersViewPlayerWrapperProps>`\r\n    position: absolute;\r\n    top: ${props => props.top}px;\r\n    left: ${props => props.left}px;\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n\r\n    padding-left: ${props => props.padding}px;\r\n    padding-right: ${props => props.padding}px;\r\n    padding-top: ${props => (props.padding / 16 * 9)}px;\r\n    padding-bottom: ${props => (props.padding / 16 * 9)}px;\r\n\r\n    ${props => props.zIndex ? `z-index: ${props.zIndex};` : ''}\r\n\r\n    transition: 300ms;\r\n`;\r\n\r\ninterface PlayersFocusedViewGrabberProps {\r\n    heightFraction: number;\r\n}\r\n\r\nexport const PlayersFocusedViewGrabber = styled.div<PlayersFocusedViewGrabberProps>`\r\n    position: absolute;\r\n    top: ${props => props.heightFraction * 100}%;\r\n    left: 0;\r\n    right: 0;\r\n    height: 10px;\r\n\r\n    opacity: 0;\r\n    transition: opacity 200ms;\r\n\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n\r\n    cursor: ns-resize;\r\n    z-index: 1;\r\n`;\r\n\r\nexport const PlayersFocusedViewGrabberDashes = styled.div`\r\n    position: absolute;\r\n    top: 3.5px;\r\n    left: 16px;\r\n    right: 16px;\r\n    height: 0;\r\n\r\n    border-top: 3px dashed rgba(255, 255, 255, 0.3);\r\n`;\r\n\r\ninterface PlayersOverlayViewGrabberProps {\r\n    top: number;\r\n    left: number;\r\n    height: number;\r\n}\r\n\r\nexport const PlayersOverlayViewGrabber = styled.div<PlayersOverlayViewGrabberProps>`\r\n    position: absolute;\r\n    top: ${props => props.top}px;\r\n    left: ${props => props.left}px;\r\n\r\n    width: 10px;\r\n    height: ${props => props.height}px;\r\n\r\n    opacity: 0;\r\n    transition: opacity 200ms;\r\n\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n\r\n    cursor: ew-resize;\r\n    z-index: 3;\r\n`;\r\n\r\nexport const PlayersOverlayViewGrabberDashes = styled.div<{ color: string }>`\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 2px;\r\n    bottom: 4px;\r\n    width: 0;\r\n\r\n    border-left: 4px dashed ${props => props.color};\r\n`;\r\n","import { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { useTheme } from '@material-ui/core';\r\nimport { getOptimalGridPlayerSize, getPlayerGridPositions, getPlayerLinePositions } from '../../utils';\r\nimport { State, VideosState, Layout } from '../../redux/types';\r\nimport { getIsFullscreen, getLayout, getMainPlayerIds, getSecondaryPlayerIds, getVideos } from '../../redux/selectors';\r\nimport { VideoPlayer } from '../VideoPlayer';\r\nimport { PlayerPosition } from './types';\r\nimport { PlayersViewContainer, PlayersFocusedViewGrabber, PlayersFocusedViewGrabberDashes, PlayersViewPlayerWrapper, PlayersOverlayViewGrabber, PlayersOverlayViewGrabberDashes } from './style';\r\n\r\ninterface OwnProps {\r\n    padding?: number;\r\n    minPlayerHeight?: number;\r\n}\r\n\r\ninterface StateProps {\r\n    layout: Layout;\r\n    videos: VideosState;\r\n    isFullscreen: boolean;\r\n    mainPlayerIds: string[];\r\n    secondaryPlayerIds: string[];\r\n}\r\n\r\nexport type PlayersViewProps = OwnProps & StateProps;\r\n\r\nconst PlayersView: React.FC<PlayersViewProps> = ({\r\n    padding = 8,\r\n    minPlayerHeight = 150,\r\n    layout,\r\n    videos,\r\n    isFullscreen,\r\n    mainPlayerIds,\r\n    secondaryPlayerIds,\r\n}) => {\r\n    const theme = useTheme();\r\n    \r\n    const containerRef = useRef<HTMLDivElement | null>(null);\r\n    \r\n    const [playerPositions, setPlayerPositions] = useState<Record<string, PlayerPosition>>({});\r\n    const [isGrabberGrabbed, setIsGrabberGrabbed] = useState(false);\r\n    const [focusedGrabberHeightFraction, setFocusedGrabberHeightFraction] = useState(0.75);\r\n    const [overlayGrabberWidthFraction, setOverlayGrabberWidthFraction] = useState(0.3);\r\n    const [overlayDimensions, setOverlayDimensions] = useState<{ rows: number; cols: number }>({ rows: 0, cols: 0 });\r\n\r\n    const updatePlayersFocusedPosition = useCallback(() => {\r\n        const { current: container } = containerRef;\r\n        if (container) {\r\n            const { width: containerWidth, height: containerHeight } = container.getBoundingClientRect();\r\n\r\n            const mainContainerHeight = containerHeight * focusedGrabberHeightFraction;\r\n            const secondaryContainerHeight = containerHeight * (1 - focusedGrabberHeightFraction) - 10;\r\n\r\n            const mainPlayersSize = getOptimalGridPlayerSize({\r\n                containerWidth,\r\n                containerHeight: mainContainerHeight,\r\n                numberOfPlayers: mainPlayerIds.length,\r\n            });\r\n\r\n            const secondaryPlayersSize = getOptimalGridPlayerSize({\r\n                containerWidth,\r\n                containerHeight: secondaryContainerHeight,\r\n                numberOfPlayers: secondaryPlayerIds.length,\r\n            });\r\n\r\n            const mainPlayerPositions = getPlayerGridPositions({\r\n                ...mainPlayersSize,\r\n                containerWidth,\r\n                containerHeight: mainContainerHeight,\r\n                numberOfPlayers: mainPlayerIds.length,\r\n            });\r\n\r\n            const offsetSecondaryPlayerPositions = getPlayerGridPositions({\r\n                ...secondaryPlayersSize,\r\n                containerWidth,\r\n                containerHeight: secondaryContainerHeight,\r\n                numberOfPlayers: secondaryPlayerIds.length,\r\n            });\r\n\r\n            const secondaryPlayerPositions = offsetSecondaryPlayerPositions.map(pos => ({ ...pos, top: pos.top + mainContainerHeight + 10 }));\r\n\r\n            const keyedMainPlayerPositions = mainPlayerIds.reduce(\r\n                (positions, id, index) => ({\r\n                    ...positions,\r\n                    [id]: mainPlayerPositions[index],\r\n                }),\r\n                {},\r\n            );\r\n\r\n            const keyedSecondaryPlayerPositions = secondaryPlayerIds.reduce(\r\n                (positions, id, index) => ({\r\n                    ...positions,\r\n                    [id]: secondaryPlayerPositions[index],\r\n                }),\r\n                {},\r\n            );\r\n\r\n            setPlayerPositions({ ...keyedMainPlayerPositions, ...keyedSecondaryPlayerPositions });\r\n        }\r\n    }, [mainPlayerIds, secondaryPlayerIds, focusedGrabberHeightFraction]);\r\n\r\n    const updatePlayersOverlayPosition = useCallback(() => {\r\n        if (mainPlayerIds.length === 0) {\r\n            setPlayerPositions({});\r\n        }\r\n\r\n        const { current: container } = containerRef;\r\n        if (container) {\r\n            const { width: containerWidth, height: containerHeight } = container.getBoundingClientRect();\r\n\r\n            const mainPlayerSize = getOptimalGridPlayerSize({\r\n                containerWidth,\r\n                containerHeight,\r\n                numberOfPlayers: 1\r\n            });\r\n\r\n            const mainPlayerPosition = getPlayerGridPositions({\r\n                ...mainPlayerSize,\r\n                containerWidth,\r\n                containerHeight,\r\n                numberOfPlayers: 1\r\n            })[0];\r\n\r\n            const lineWidth = mainPlayerPosition.width * overlayGrabberWidthFraction;\r\n\r\n            const {\r\n                positions: offsetSecondaryPlayerPositions,\r\n                rows: overlayRows,\r\n                cols: overlayCols,\r\n            } = getPlayerLinePositions({\r\n                lineWidth,\r\n                minPlayerHeight,\r\n                containerHeight: mainPlayerSize.playerHeight - padding * 2 - 40,\r\n                numberOfPlayers: secondaryPlayerIds.length,\r\n            });\r\n\r\n            const secondaryPlayerPositions = offsetSecondaryPlayerPositions.map(pos => ({\r\n                ...pos,\r\n                top: pos.top + mainPlayerPosition.top + padding,\r\n                left: pos.left + (mainPlayerPosition.width - lineWidth) + mainPlayerPosition.left - padding,\r\n            }));\r\n\r\n            const keyedSecondaryPlayerPositions = secondaryPlayerIds.reduce(\r\n                (positions, id, index) => ({\r\n                    ...positions,\r\n                    [id]: secondaryPlayerPositions[index],\r\n                }),\r\n                {},\r\n            );\r\n\r\n            setOverlayDimensions({\r\n                rows: overlayRows,\r\n                cols: overlayCols,\r\n            });\r\n\r\n            setPlayerPositions({\r\n                [mainPlayerIds[0]]: mainPlayerPosition,\r\n                ...keyedSecondaryPlayerPositions,\r\n            });\r\n        }\r\n    }, [padding, mainPlayerIds, secondaryPlayerIds, minPlayerHeight, overlayGrabberWidthFraction]);\r\n\r\n    const updatePlayersGridPosition = useCallback(() => {\r\n        const { current: container } = containerRef;\r\n        if (container) {\r\n            const { width: containerWidth, height: containerHeight } = container.getBoundingClientRect();\r\n\r\n            const playersSize = getOptimalGridPlayerSize({\r\n                containerWidth,\r\n                containerHeight,\r\n                numberOfPlayers: Object.keys(videos).length,\r\n            })\r\n\r\n            const playerPositions = getPlayerGridPositions({\r\n                ...playersSize,\r\n                containerWidth,\r\n                containerHeight,\r\n                numberOfPlayers: Object.keys(videos).length,\r\n            });\r\n\r\n            const keyedPlayerPositions = [...mainPlayerIds, ...secondaryPlayerIds].reduce(\r\n                (positions, id, index) => ({\r\n                    ...positions,\r\n                    [id]: playerPositions[index],\r\n                }),\r\n                {},\r\n            );\r\n\r\n            setPlayerPositions(keyedPlayerPositions);\r\n        }\r\n    }, [videos, mainPlayerIds, secondaryPlayerIds]);\r\n\r\n    useEffect(() => {\r\n        switch (layout) {\r\n            case Layout.Focused:\r\n                updatePlayersFocusedPosition();\r\n                break;\r\n            case Layout.Overlay:\r\n                updatePlayersOverlayPosition();\r\n                break;\r\n            case Layout.Grid:\r\n                updatePlayersGridPosition();\r\n                break;\r\n        }\r\n    }, [containerRef, layout, videos, isFullscreen, updatePlayersFocusedPosition, updatePlayersOverlayPosition, updatePlayersGridPosition]);\r\n\r\n    const getPlayerPosition = useCallback((id: string) => {\r\n        return playerPositions[id] || { top: -100000, left: -100000, width: 0, height: 0 };\r\n    }, [playerPositions]);\r\n\r\n    const getOverlayGrabberPosition = () => {\r\n        const { current: container } = containerRef;\r\n        if (secondaryPlayerIds.length === 0 || mainPlayerIds.length === 0 || !container) {\r\n            return { top: -10000, left: -10000, height: 10000 };\r\n        }\r\n\r\n        const { top: mainPlayerTop, left: mainPlayerLeft, width: mainPlayerWidth } = getPlayerPosition(mainPlayerIds[0]);\r\n        const { height: secondaryPlayerHeight } = getPlayerPosition(secondaryPlayerIds[0]);\r\n        const { rows } = overlayDimensions;\r\n\r\n        return {\r\n            top: mainPlayerTop + padding,\r\n            left: mainPlayerLeft + mainPlayerWidth * (1 - overlayGrabberWidthFraction) - padding,\r\n            height: secondaryPlayerHeight * rows,\r\n        };\r\n    };\r\n\r\n    const updateOverlayGrabberWidthFraction = useCallback(() => {\r\n        const { cols } = overlayDimensions;\r\n\r\n        if (mainPlayerIds.length > 0 && secondaryPlayerIds.length > 0) {\r\n            const { width: mainPlayerWidth } = getPlayerPosition(mainPlayerIds[0]);\r\n            const { width: secondaryPlayerWidth } = getPlayerPosition(secondaryPlayerIds[0]);\r\n\r\n            const overlayWidth = cols * secondaryPlayerWidth;\r\n\r\n            if (mainPlayerWidth > 0 && overlayWidth > 0) {\r\n                const newOverlayGrabberWidthFraction = overlayWidth / mainPlayerWidth;\r\n                if (newOverlayGrabberWidthFraction <= 1) {\r\n                    setOverlayGrabberWidthFraction(overlayWidth / mainPlayerWidth);\r\n                }\r\n            }\r\n        }\r\n    }, [getPlayerPosition, mainPlayerIds, secondaryPlayerIds, overlayDimensions]);\r\n\r\n    useEffect(() => {\r\n        if (!isGrabberGrabbed) {\r\n            updateOverlayGrabberWidthFraction();\r\n        }\r\n    }, [overlayDimensions, isGrabberGrabbed, updateOverlayGrabberWidthFraction]);\r\n\r\n    const handleWindowMouseMove = useCallback((event: MouseEvent) => {\r\n        const { current: container } = containerRef;\r\n        if (container && isGrabberGrabbed) {\r\n            if (layout === Layout.Focused) {\r\n                const mouseY = event.clientY;\r\n                const { height: containerHeight, y: containerY } = container.getBoundingClientRect();\r\n\r\n                const relativeMouseY = mouseY - containerY;\r\n                const clampedMouseY = Math.max(minPlayerHeight, Math.min(containerHeight - minPlayerHeight, relativeMouseY));\r\n\r\n                setFocusedGrabberHeightFraction(clampedMouseY / containerHeight);\r\n            }\r\n\r\n            if (layout === Layout.Overlay && mainPlayerIds.length > 0) {\r\n                const mouseX = event.clientX;\r\n                const { left: mainPlayerLeft, width: mainPlayerWidth } = getPlayerPosition(mainPlayerIds[0]);\r\n\r\n                const minPlayerWidth = minPlayerHeight / 9 * 16;\r\n                const relativeMouseX = mouseX - mainPlayerLeft;\r\n                const clampedMouseX = Math.max(0, Math.min(mainPlayerWidth - minPlayerWidth, relativeMouseX));\r\n\r\n                setOverlayGrabberWidthFraction(1 - clampedMouseX / mainPlayerWidth);\r\n            }\r\n        }\r\n    }, [getPlayerPosition, layout, mainPlayerIds, minPlayerHeight, isGrabberGrabbed]);\r\n\r\n    const handleGrabberMouseDown = () => {\r\n        setIsGrabberGrabbed(true);\r\n    };\r\n\r\n    const handleGrabberMouseUp = useCallback(() => {\r\n        if (layout === Layout.Overlay) {\r\n            updateOverlayGrabberWidthFraction();\r\n        }\r\n        setIsGrabberGrabbed(false);\r\n    }, [layout, updateOverlayGrabberWidthFraction]);\r\n\r\n    useEffect(() => {\r\n        if (isGrabberGrabbed) {\r\n            window.addEventListener('mousemove', handleWindowMouseMove);\r\n            window.addEventListener('mouseup', handleGrabberMouseUp);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('mousemove', handleWindowMouseMove);\r\n            window.removeEventListener('mouseup', handleGrabberMouseUp);\r\n        };\r\n    }, [isGrabberGrabbed, handleWindowMouseMove, handleGrabberMouseUp]);\r\n\r\n    const focusedGrabberProps = {\r\n        heightFraction: focusedGrabberHeightFraction,\r\n        onMouseDown: handleGrabberMouseDown,\r\n        onMouseUp: handleGrabberMouseUp,\r\n    };\r\n\r\n    const overlayGrabberProps = {\r\n        ...getOverlayGrabberPosition(),\r\n        onMouseDown: handleGrabberMouseDown,\r\n        onMouseUp: handleGrabberMouseUp,\r\n    };\r\n\r\n    return (\r\n        <PlayersViewContainer ref={containerRef}>\r\n            {layout === Layout.Focused ? (\r\n                <PlayersFocusedViewGrabber {...focusedGrabberProps}>\r\n                    <PlayersFocusedViewGrabberDashes />\r\n                </PlayersFocusedViewGrabber>\r\n            ) : null}\r\n\r\n            {layout === Layout.Overlay ? (\r\n                <PlayersOverlayViewGrabber {...overlayGrabberProps}>\r\n                    <PlayersOverlayViewGrabberDashes color={theme.palette.primary.main} />\r\n                </PlayersOverlayViewGrabber>\r\n            ) : null}\r\n\r\n            {Object.entries(videos).map(([id, video]) => {\r\n                const playerPosition = getPlayerPosition(id);\r\n                const isOverlaidSecondary = layout === Layout.Overlay && secondaryPlayerIds.indexOf(id) !== -1;\r\n\r\n                const wrapperProps = {\r\n                    key: id,\r\n                    padding,\r\n                    zIndex: isOverlaidSecondary ? 2 : undefined,\r\n                    ...playerPosition,\r\n                };\r\n\r\n                const playerProps = {\r\n                    id,\r\n                    video,\r\n                    width: playerPosition.width - padding * 2,\r\n                    height: playerPosition.height - (padding * 2 / 16 * 9),\r\n                    shadow: isOverlaidSecondary,\r\n                };\r\n\r\n                return (\r\n                    <PlayersViewPlayerWrapper {...wrapperProps}>\r\n                        <VideoPlayer {...playerProps} />\r\n                    </PlayersViewPlayerWrapper>\r\n                );\r\n            })}\r\n        </PlayersViewContainer>\r\n    );\r\n};\r\n\r\nexport default connect<StateProps, {}, OwnProps, State>(\r\n    createStructuredSelector({\r\n        layout: getLayout,\r\n        videos: getVideos,\r\n        isFullscreen: getIsFullscreen,\r\n        mainPlayerIds: getMainPlayerIds,\r\n        secondaryPlayerIds: getSecondaryPlayerIds,\r\n    }),\r\n)(PlayersView);\r\n","import { State } from '../types';\r\n\r\nexport const getVideos = (state: State) => state.videos;\r\n","import { getOptimalGridPlayerSize } from './getOptimalGridPlayerSize';\r\nimport { getPlayerGridPositions } from './getPlayerGridPositions';\r\n\r\ninterface GetPlayerLinePositionsProps {\r\n    lineWidth: number;\r\n    minPlayerHeight: number;\r\n    containerHeight: number;\r\n    numberOfPlayers: number;\r\n}\r\n\r\nexport const getPlayerLinePositions = ({ lineWidth, minPlayerHeight, containerHeight, numberOfPlayers }: GetPlayerLinePositionsProps) => {\r\n    const minPlayerWidth = minPlayerHeight / 9 * 16;\r\n\r\n    const playerWidth = lineWidth / numberOfPlayers;\r\n    const playerHeight = playerWidth / 16 * 9;\r\n\r\n    if (playerHeight < minPlayerHeight) {\r\n        const cols = Math.floor(lineWidth / minPlayerWidth);\r\n        const rows = Math.ceil(numberOfPlayers / cols);\r\n\r\n        if (rows * minPlayerHeight < containerHeight) {\r\n            const positions = getPlayerGridPositions({\r\n                playerWidth: minPlayerWidth,\r\n                playerHeight: minPlayerHeight,\r\n                containerWidth: lineWidth,\r\n                containerHeight: rows * minPlayerHeight,\r\n                numberOfPlayers,\r\n                alignToRight: true,\r\n            });\r\n\r\n            return {\r\n                positions,\r\n                rows,\r\n                cols\r\n            };\r\n        }\r\n\r\n        const { playerWidth, playerHeight } = getOptimalGridPlayerSize({\r\n            containerWidth: lineWidth,\r\n            containerHeight,\r\n            numberOfPlayers,\r\n        });\r\n\r\n        const newCols = Math.floor(lineWidth / playerWidth);\r\n        const newRows = Math.ceil(numberOfPlayers / newCols);\r\n\r\n        const positions = getPlayerGridPositions({\r\n            playerWidth,\r\n            playerHeight,\r\n            containerWidth: lineWidth,\r\n            containerHeight: Math.min(containerHeight, newRows * playerHeight),\r\n            numberOfPlayers,\r\n            alignToRight: true,\r\n        });\r\n\r\n        return {\r\n            positions,\r\n            rows: newRows,\r\n            cols: newCols,\r\n        };\r\n    }\r\n\r\n    const positions = Array.from({ length: numberOfPlayers }).map((_, i) => ({\r\n        top: 0,\r\n        left: i * playerWidth,\r\n        width: playerWidth,\r\n        height: playerHeight,\r\n    }));\r\n\r\n    return {\r\n        positions,\r\n        rows: 1,\r\n        cols: numberOfPlayers,\r\n    };\r\n};\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        outline: none;\r\n    }\r\n\r\n    html {\r\n        position: relative;\r\n        width: 100vw;\r\n        height: 100vh;\r\n    }\r\n\r\n    body {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        -webkit-tap-highlight-color:  rgba(255, 255, 255, 0); \r\n    }\r\n\r\n    #root {\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: black;\r\n    }\r\n`;\r\n\r\nexport const AppContainer = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n","import { useState } from 'react';\r\nimport { unstable_createMuiStrictModeTheme as createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { AddVideosDialog, AppBar, PlayerControlOverlay, KeyboardEventHandler, PlayersView } from './components';\r\nimport { AppContainer, GlobalStyle } from './style';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: red['700'],\r\n            light: red['A700'],\r\n        },\r\n    },\r\n});\r\n\r\nconst App: React.FC = () => {\r\n    const [isAddVideosDialogOpen, setIsAddVideosDialogOpen] = useState(true);\r\n\r\n    const openAddVideosDialog = () => setIsAddVideosDialogOpen(true);\r\n    const closeAddVideosDialog = () => setIsAddVideosDialogOpen(false);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyle />\r\n            <CssBaseline />\r\n            <KeyboardEventHandler isActive={!isAddVideosDialogOpen} />\r\n            <AppContainer>\r\n                <AppBar onAddVideosClick={openAddVideosDialog} />\r\n                <PlayersView />\r\n                <PlayerControlOverlay />\r\n            </AppContainer>\r\n            <AddVideosDialog open={isAddVideosDialogOpen} onClose={closeAddVideosDialog} />\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export interface PlayerInfo {\r\n    isReady: boolean;\r\n    isPlaying: boolean;\r\n    isBuffering: boolean;\r\n    hasEnded: boolean;\r\n\r\n    durationSeconds: number;\r\n    playedSeconds: number;\r\n    playedFraction: number;\r\n    loadedSeconds: number;\r\n    loadedFraction: number;\r\n\r\n    volume: number;\r\n    isMuted: boolean;\r\n\r\n    pendingSeeks: number[];\r\n}\r\nexport type PlayersInfoState = Record<string, PlayerInfo>;\r\n\r\nexport const PLAYER_INITIALIZED = 'PLAYER_INITIALIZED';\r\nexport const PLAYER_READY = 'PLAYER_READY';\r\nexport const PLAYER_STARTED_PLAYING = 'PLAYER_STARTED_PLAYING';\r\nexport const PLAYER_STOPPED_PLAYING = 'PLAYER_STOPPED_PLAYING';\r\nexport const PLAYER_STARTED_BUFFERING = 'PLAYER_STARTED_BUFFERING';\r\nexport const PLAYER_STOPPED_BUFFERING = 'PLAYER_STOPPED_BUFFERING';\r\nexport const PLAYER_VIDEO_ENDED = 'PLAYER_VIDEO_ENDED';\r\nexport const PLAYER_VIDEO_RESTARTED = 'PLAYER_VIDEO_RESTARTED';\r\nexport const PLAYER_DURATION_UPDATED = 'PLAYER_DURATION_UPDATED';\r\nexport const PLAYER_PLAYED_TIME_UPDATED = 'PLAYER_PLAYED_TIME_UPDATED';\r\nexport const PLAYER_LOADED_TIME_UPDATED = 'PLAYER_LOADED_TIME_UPDATED';\r\nexport const PLAYER_PROGRESS_UPDATED = 'PLAYER_PROGRESS_UPDATED';\r\nexport const PLAYER_VOLUME_UPDATED = 'PLAYER_VOLUME_UPDATED';\r\nexport const PLAYER_MUTED = 'PLAYER_MUTED';\r\nexport const PLAYER_UNMUTED = 'PLAYER_UNMUTED';\r\nexport const PLAYER_PENDING_SEEK_PUSHED = 'PLAYER_PENDING_SEEK_PUSHED';\r\nexport const PLAYER_PENDING_SEEK_POPPED = 'PLAYER_PENDING_SEEK_POPPED';\r\nexport const PLAYER_DELETED = 'PLAYER_DELETED';\r\n\r\ninterface WithId {\r\n    id: string;\r\n}\r\n\r\nexport interface PlayerInitializedAction {\r\n    type: typeof PLAYER_INITIALIZED;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerReadyAction {\r\n    type: typeof PLAYER_READY;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerStartedPlayingAction {\r\n    type: typeof PLAYER_STARTED_PLAYING;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerStoppedPlayingAction {\r\n    type: typeof PLAYER_STOPPED_PLAYING;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerStartedBufferingAction {\r\n    type: typeof PLAYER_STARTED_BUFFERING;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerStoppedBufferingAction {\r\n    type: typeof PLAYER_STOPPED_BUFFERING;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerVideoEndedAction {\r\n    type: typeof PLAYER_VIDEO_ENDED;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerVideoRestartedAction {\r\n    type: typeof PLAYER_VIDEO_RESTARTED;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerDurationUpdatedAction {\r\n    type: typeof PLAYER_DURATION_UPDATED;\r\n    payload: WithId & {\r\n        durationSeconds: number;\r\n    };\r\n}\r\n\r\nexport interface PlayerPlayedTimeUpdatedAction {\r\n    type: typeof PLAYER_PLAYED_TIME_UPDATED;\r\n    payload: WithId & {\r\n        playedSeconds: number;\r\n        playedFraction: number;\r\n    };\r\n}\r\n\r\nexport interface PlayerLoadedTimeUpdatedAction {\r\n    type: typeof PLAYER_LOADED_TIME_UPDATED;\r\n    payload: WithId & {\r\n        loadedSeconds: number;\r\n        loadedFraction: number;\r\n    };\r\n}\r\n\r\nexport interface PlayerProgressUpdatedAction {\r\n    type: typeof PLAYER_PROGRESS_UPDATED;\r\n    payload: WithId & {\r\n        playedSeconds: number;\r\n        playedFraction: number;\r\n        loadedSeconds: number;\r\n        loadedFraction: number;\r\n    };\r\n}\r\n\r\nexport interface PlayerVolumeUpdatedAction {\r\n    type: typeof PLAYER_VOLUME_UPDATED;\r\n    payload: WithId & {\r\n        volume: number;\r\n    };\r\n}\r\n\r\nexport interface PlayerMutedAction {\r\n    type: typeof PLAYER_MUTED;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerUnmutedAction {\r\n    type: typeof PLAYER_UNMUTED;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerPendingSeekPushedAction {\r\n    type: typeof PLAYER_PENDING_SEEK_PUSHED;\r\n    payload: WithId & {\r\n        seekToSeconds: number;\r\n    };\r\n}\r\n\r\nexport interface PlayerPendingSeekPoppedAction {\r\n    type: typeof PLAYER_PENDING_SEEK_POPPED;\r\n    payload: WithId;\r\n}\r\n\r\nexport interface PlayerDeletedAction {\r\n    type: typeof PLAYER_DELETED;\r\n    payload: WithId;\r\n}\r\n\r\nexport type PlayersInfoAction = (\r\n    PlayerInitializedAction | PlayerReadyAction | PlayerStartedPlayingAction | PlayerStoppedPlayingAction |\r\n    PlayerStartedBufferingAction | PlayerStoppedBufferingAction | PlayerVideoEndedAction | PlayerVideoRestartedAction |\r\n    PlayerDurationUpdatedAction | PlayerPlayedTimeUpdatedAction | PlayerLoadedTimeUpdatedAction | PlayerProgressUpdatedAction |\r\n    PlayerVolumeUpdatedAction | PlayerPendingSeekPushedAction | PlayerPendingSeekPoppedAction | PlayerMutedAction |\r\n    PlayerUnmutedAction | PlayerDeletedAction\r\n);\r\n","export interface MasterPlayerInfoState {\r\n    isReady: boolean;\r\n    isPlaying: boolean;\r\n    isBuffering: boolean;\r\n    hasEnded: boolean;\r\n\r\n    durationSeconds: number;\r\n    playedSeconds: number;\r\n    playedFraction: number;\r\n    loadedSeconds: number;\r\n    loadedFraction: number;\r\n\r\n    volume: number;\r\n    isMuted: boolean;\r\n\r\n    pendingSeek: number | null;\r\n}\r\n\r\nexport const MASTER_PLAYER_READY = 'MASTER_PLAYER_READY';\r\nexport const MASTER_PLAYER_NOT_READY = 'MASTER_PLAYER_NOT_READY';\r\nexport const MASTER_PLAYER_STARTED_PLAYING = 'MASTER_PLAYER_STARTED_PLAYING';\r\nexport const MASTER_PLAYER_STOPPED_PLAYING = 'MASTER_PLAYER_STOPPED_PLAYING';\r\nexport const MASTER_PLAYER_STARTED_BUFFERING = 'MASTER_PLAYER_STARTED_BUFFERING';\r\nexport const MASTER_PLAYER_STOPPED_BUFFERING = 'MASTER_PLAYER_STOPPED_BUFFERING';\r\nexport const MASTER_PLAYER_ENDED = 'MASTER_PLAYER_ENDED';\r\nexport const MASTER_PLAYER_DURATION_UPDATED = 'MASTER_PLAYER_DURATION_UPDATED';\r\nexport const MASTER_PLAYER_PLAYED_TIME_UPDATED = 'MASTER_PLAYER_PLAYED_TIME_UPDATED';\r\nexport const MASTER_PLAYER_LOADED_TIME_UPDATED = 'MASTER_PLAYER_LOADED_TIME_UPDATED';\r\nexport const MASTER_PLAYER_PROGRESS_UPDATED = 'MASTER_PLAYER_PROGRESS_UPDATED';\r\nexport const MASTER_PLAYER_VOLUME_UPDATED = 'MASTER_PLAYER_VOLUME_UPDATED';\r\nexport const MASTER_PLAYER_MUTED = 'MASTER_PLAYER_MUTED';\r\nexport const MASTER_PLAYER_UNMUTED = 'MASTER_PLAYER_UNMUTED';\r\nexport const MASTER_PLAYER_PENDING_SEEK_SET = 'MASTER_PLAYER_PENDING_SEEK_SET';\r\nexport const MASTER_PLAYER_PENDING_SEEK_REMOVED = 'MASTER_PLAYER_PENDING_SEEK_REMOVED';\r\n\r\nexport interface MasterPlayerReadyAction {\r\n    type: typeof MASTER_PLAYER_READY;\r\n}\r\n\r\nexport interface MasterPlayerNotReadyAction {\r\n    type: typeof MASTER_PLAYER_NOT_READY;\r\n}\r\n\r\nexport interface MasterPlayerStartedPlayingAction {\r\n    type: typeof MASTER_PLAYER_STARTED_PLAYING;\r\n}\r\n\r\nexport interface MasterPlayerStoppedPlayingAction {\r\n    type: typeof MASTER_PLAYER_STOPPED_PLAYING;\r\n}\r\n\r\nexport interface MasterPlayerStartedBufferingAction {\r\n    type: typeof MASTER_PLAYER_STARTED_BUFFERING;\r\n}\r\n\r\nexport interface MasterPlayerStoppedBufferingAction {\r\n    type: typeof MASTER_PLAYER_STOPPED_BUFFERING;\r\n}\r\n\r\nexport interface MasterPlayerEndedAction {\r\n    type: typeof MASTER_PLAYER_ENDED;\r\n}\r\n\r\nexport interface MasterPlayerDurationUpdatedAction {\r\n    type: typeof MASTER_PLAYER_DURATION_UPDATED;\r\n    payload: {\r\n        durationSeconds: number;\r\n    };\r\n}\r\n\r\nexport interface MasterPlayerPlayedTimeUpdatedAction {\r\n    type: typeof MASTER_PLAYER_PLAYED_TIME_UPDATED;\r\n    payload: {\r\n        playedSeconds: number;\r\n        playedFraction: number;\r\n    };\r\n}\r\n\r\nexport interface MasterPlayerLoadedTimeUpdatedAction {\r\n    type: typeof MASTER_PLAYER_LOADED_TIME_UPDATED;\r\n    payload: {\r\n        loadedSeconds: number;\r\n        loadedFraction: number;\r\n    };\r\n}\r\n\r\nexport interface MasterPlayerProgressUpdatedAction {\r\n    type: typeof MASTER_PLAYER_PROGRESS_UPDATED;\r\n    payload: {\r\n        playedSeconds: number;\r\n        playedFraction: number;\r\n        loadedSeconds: number;\r\n        loadedFraction: number;\r\n    };\r\n}\r\n\r\nexport interface MasterPlayerVolumeUpdatedAction {\r\n    type: typeof MASTER_PLAYER_VOLUME_UPDATED;\r\n    payload: {\r\n        volume: number;\r\n    };\r\n}\r\n\r\nexport interface MasterPlayerMutedAction {\r\n    type: typeof MASTER_PLAYER_MUTED;\r\n}\r\n\r\nexport interface MasterPlayerUnmutedAction {\r\n    type: typeof MASTER_PLAYER_UNMUTED;\r\n}\r\n\r\nexport interface MasterPlayerPendingSeekSetAction {\r\n    type: typeof MASTER_PLAYER_PENDING_SEEK_SET;\r\n    payload: {\r\n        seekToSeconds: number;\r\n    };\r\n}\r\n\r\nexport interface MasterPlayerPendingSeekRemovedAction {\r\n    type: typeof MASTER_PLAYER_PENDING_SEEK_REMOVED;\r\n}\r\n\r\nexport type MasterPlayerInfoAction = (\r\n    MasterPlayerReadyAction | MasterPlayerNotReadyAction | MasterPlayerStartedPlayingAction | MasterPlayerStoppedPlayingAction |\r\n    MasterPlayerStartedBufferingAction | MasterPlayerStoppedBufferingAction | MasterPlayerEndedAction | MasterPlayerDurationUpdatedAction |\r\n    MasterPlayerPlayedTimeUpdatedAction | MasterPlayerLoadedTimeUpdatedAction | MasterPlayerProgressUpdatedAction |\r\n    MasterPlayerVolumeUpdatedAction | MasterPlayerMutedAction | MasterPlayerUnmutedAction | MasterPlayerPendingSeekSetAction | MasterPlayerPendingSeekRemovedAction\r\n);","export enum ControlsMode {\r\n    Grouped = 'Grouped',\r\n    Individual = 'Individual',\r\n}\r\n\r\nexport enum Layout {\r\n    Overlay = 'Overlay',\r\n    Focused = 'Focused',\r\n    Grid = 'Grid',\r\n}\r\n\r\nexport interface SettingsState {\r\n    isFullscreen: boolean;\r\n    controlsMode: ControlsMode;\r\n    layout: Layout;\r\n    focusedPlayerId: string | null;\r\n    \r\n    mainPlayerIds: string[];\r\n    secondaryPlayerIds: string[];\r\n}\r\n\r\nexport const SETTINGS_FULLSCREEN_ENTERED = 'SETTINGS_FULLSCREEN_ENTERED';\r\nexport const SETTINGS_FULLSCREEN_EXITED = 'SETTINGS_FULLSCREEN_EXITED';\r\nexport const SETTINGS_CONTROLS_MODE_CHANGED = 'SETTINGS_CONTROLS_MODE_CHANGED';\r\nexport const SETTINGS_LAYOUT_CHANGED = 'SETTINGS_LAYOUT_CHANGED';\r\nexport const SETTINGS_FOCUSED_PLAYER_ID_CHANGED = 'SETTINGS_FOCUSED_PLAYER_ID_CHANGED';\r\nexport const SETTINGS_MAIN_PLAYER_IDS_CHANGED = 'SETTINGS_MAIN_PLAYER_IDS_CHANGED';\r\nexport const SETTINGS_SECONDARY_PLAYER_IDS_CHANGED = 'SETTINGS_MAIN_SECONDARY_IDS_CHANGED';\r\nexport const SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED = 'SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED';\r\n\r\nexport interface SettingsFullscreenEnteredAction {\r\n    type: typeof SETTINGS_FULLSCREEN_ENTERED;\r\n}\r\n\r\nexport interface SettingsFullscreenExitedAction {\r\n    type: typeof SETTINGS_FULLSCREEN_EXITED;\r\n}\r\n\r\nexport interface SettingsControlsModeChangedAction {\r\n    type: typeof SETTINGS_CONTROLS_MODE_CHANGED;\r\n    payload: {\r\n        controlsMode: ControlsMode;\r\n    };\r\n}\r\n\r\nexport interface SettingsLayoutChangedAction {\r\n    type: typeof SETTINGS_LAYOUT_CHANGED;\r\n    payload: {\r\n        layout: Layout;\r\n    };\r\n}\r\n\r\nexport interface SettingsFocusedPlayerIdChangedAction {\r\n    type: typeof SETTINGS_FOCUSED_PLAYER_ID_CHANGED;\r\n    payload: {\r\n        focusedPlayerId: string | null;\r\n    };\r\n}\r\n\r\nexport interface SettingsMainPlayerIdsChangedAction {\r\n    type: typeof SETTINGS_MAIN_PLAYER_IDS_CHANGED;\r\n    payload: {\r\n        mainPlayerIds: string[];\r\n    };\r\n}\r\n\r\nexport interface SettingsSecondaryPlayerIdsChangedAction {\r\n    type: typeof SETTINGS_SECONDARY_PLAYER_IDS_CHANGED;\r\n    payload: {\r\n        secondaryPlayerIds: string[];\r\n    };\r\n}\r\n\r\nexport interface SettingsMainAndSecondaryPlayerIdsChanged {\r\n    type: typeof SETTINGS_MAIN_AND_SECONDARY_PLAYER_IDS_CHANGED;\r\n    payload: {\r\n        mainPlayerIds: string[];\r\n        secondaryPlayerIds: string[];\r\n    };\r\n}\r\n\r\nexport type SettingsAction = (\r\n    SettingsFullscreenEnteredAction | SettingsFullscreenExitedAction | SettingsControlsModeChangedAction |\r\n    SettingsLayoutChangedAction | SettingsFocusedPlayerIdChangedAction | SettingsMainPlayerIdsChangedAction |\r\n    SettingsSecondaryPlayerIdsChangedAction | SettingsMainAndSecondaryPlayerIdsChanged\r\n);","export interface OffsetsState {\r\n    // Reference player always is the first one to play (\"the least offset\").\r\n    referencePlayerId: string | null;\r\n\r\n    // All offsets should be negative (meaning all non-reference players will be offset \"to the future\")\r\n    offsets: Record<string, number>;\r\n}\r\n\r\nexport const OFFSETS_REFERENCE_PLAYER_ID_CHANGED = 'OFFSETS_REFERENCE_PLAYER_ID_CHANGED';\r\nexport const PLAYER_OFFSET_CHANGED = 'PLAYER_OFFSET_CHANGED';\r\nexport const PLAYER_OFFSET_REMOVED = 'PLAYER_OFFSET_REMOVED';\r\n\r\nexport interface OffsetsReferencePlayerIdChangedAction {\r\n    type: typeof OFFSETS_REFERENCE_PLAYER_ID_CHANGED;\r\n    payload: {\r\n        referenceId: string | null;\r\n    };\r\n}\r\n\r\nexport interface PlayerOffsetChangedAction {\r\n    type: typeof PLAYER_OFFSET_CHANGED;\r\n    payload: {\r\n        id: string;\r\n        offset: number;\r\n    };\r\n}\r\n\r\nexport interface PlayerOffsetRemovedAction {\r\n    type: typeof PLAYER_OFFSET_REMOVED;\r\n    payload: {\r\n        id: string;\r\n    };\r\n}\r\n\r\nexport type OffsetsAction = OffsetsReferencePlayerIdChangedAction | PlayerOffsetChangedAction | PlayerOffsetRemovedAction;\r\n","export interface Video {\r\n    url: string;\r\n}\r\n\r\nexport type VideosState = Record<string, Video>;\r\n\r\nexport const VIDEOS_ADDED = 'VIDEOS_ADDED';\r\nexport const VIDEO_DELETED = 'VIDEO_DELETED';\r\n\r\nexport interface VideosAddedAction {\r\n    type: typeof VIDEOS_ADDED;\r\n    payload: Record<string, Video>;\r\n}\r\n\r\nexport interface VideoRemovedAction {\r\n    type: typeof VIDEO_DELETED;\r\n    payload: {\r\n        id: string;\r\n    };\r\n}\r\n\r\nexport type VideosAction = VideosAddedAction | VideoRemovedAction;\r\n"],"sourceRoot":""}